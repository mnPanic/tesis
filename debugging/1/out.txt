Checking proof 'dnf': 
Checking 
proof: PImpE {antecedent = ~(~(x ^ (x => y)) v y), proofImp = PImpI {hypAntecedent = "h ~(~(x ^ (x => y)) v y)", proofConsequent = PImpE {antecedent = ~~(x ^ (x => y)) ^ ~y, proofImp = PImpI {hypAntecedent = "h ~~(x ^ (x => y)) ^ ~y", proofConsequent = PImpE {antecedent = (x ^ (x => y)) ^ ~y, proofImp = PImpI {hypAntecedent = "h (x ^ (x => y)) ^ ~y", proofConsequent = PImpE {antecedent = (x ^ (~x v y)) ^ ~y, proofImp = PImpI {hypAntecedent = "h (x ^ (~x v y)) ^ ~y", proofConsequent = PImpE {antecedent = ((x ^ ~x) v (x ^ y)) ^ ~y, proofImp = PImpI {hypAntecedent = "h ((x ^ ~x) v (x ^ y)) ^ ~y", proofConsequent = PImpE {antecedent = ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y), proofImp = PImpI {hypAntecedent = "h ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y)", proofConsequent = PAx "h ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y)"}, proofAntecedent = PNamed {name = "and dist over or R (LR)", proof = POrE {left = x ^ ~x, right = x ^ y, proofOr = PAndE1 {right = ~y, proofAnd = PAx "h ((x ^ ~x) v (x ^ y)) ^ ~y"}, hypLeft = "h x ^ ~x", proofAssumingLeft = POrI1 {proofLeft = PAndI {proofLeft = PAx "h x ^ ~x", proofRight = PAndE2 {left = (x ^ ~x) v (x ^ y), proofAnd = PAx "h ((x ^ ~x) v (x ^ y)) ^ ~y"}}}, hypRight = "h x ^ y", proofAssumingRight = POrI2 {proofRight = PAndI {proofLeft = PAx "h x ^ y", proofRight = PAndE2 {left = (x ^ ~x) v (x ^ y), proofAnd = PAx "h ((x ^ ~x) v (x ^ y)) ^ ~y"}}}}}}}, proofAntecedent = PNamed {name = "and cong1 LR", proof = PImpE {antecedent = x ^ (~x v y), proofImp = PImpI {hypAntecedent = "h x ^ (~x v y)", proofConsequent = PAndI {proofLeft = PNamed {name = "and dist over or L (LR)", proof = POrE {left = ~x, right = y, proofOr = PAndE2 {left = x, proofAnd = PAx "h x ^ (~x v y)"}, hypLeft = "h ~x", proofAssumingLeft = POrI1 {proofLeft = PAndI {proofLeft = PAndE1 {right = ~x v y, proofAnd = PAx "h x ^ (~x v y)"}, proofRight = PAx "h ~x"}}, hypRight = "h y", proofAssumingRight = POrI2 {proofRight = PAndI {proofLeft = PAndE1 {right = ~x v y, proofAnd = PAx "h x ^ (~x v y)"}, proofRight = PAx "h y"}}}}, proofRight = PAndE2 {left = x ^ (~x v y), proofAnd = PAx "h (x ^ (~x v y)) ^ ~y"}}}, proofAntecedent = PAndE1 {right = ~y, proofAnd = PAx "h (x ^ (~x v y)) ^ ~y"}}}}}, proofAntecedent = PNamed {name = "and cong1 LR", proof = PImpE {antecedent = x ^ (x => y), proofImp = PImpI {hypAntecedent = "h x ^ (x => y)", proofConsequent = PAndI {proofLeft = PNamed {name = "and cong2 LR", proof = PImpE {antecedent = x => y, proofImp = PImpI {hypAntecedent = "h x", proofConsequent = PAndI {proofLeft = PAndE1 {right = x => y, proofAnd = PAx "h x ^ (x => y)"}, proofRight = PNamed {name = "imp elim LR", proof = POrE {left = x, right = ~x, proofOr = PLEM, hypLeft = "h x", proofAssumingLeft = POrI2 {proofRight = PImpE {antecedent = x, proofImp = PAx "h x => y", proofAntecedent = PAx "h x"}}, hypRight = "h ~x", proofAssumingRight = POrI1 {proofLeft = PAx "h ~x"}}}}}, proofAntecedent = PAndE2 {left = x, proofAnd = PAx "h x ^ (x => y)"}}}, proofRight = PAndE2 {left = x ^ (x => y), proofAnd = PAx "h (x ^ (x => y)) ^ ~y"}}}, proofAntecedent = PAndE1 {right = ~y, proofAnd = PAx "h (x ^ (x => y)) ^ ~y"}}}}}, proofAntecedent = PNamed {name = "and cong1 LR", proof = PImpE {antecedent = ~~(x ^ (x => y)), proofImp = PImpI {hypAntecedent = "h ~~(x ^ (x => y))", proofConsequent = PAndI {proofLeft = PNamed {name = "dneg elim", proof = PImpE {antecedent = ~~(x ^ (x => y)), proofImp = PImpI {hypAntecedent = "h ~~(x ^ (x => y))", proofConsequent = POrE {left = x ^ (x => y), right = ~(x ^ (x => y)), proofOr = PLEM, hypLeft = "h x ^ (x => y)", proofAssumingLeft = PAx "h x ^ (x => y)", hypRight = "h ~(x ^ (x => y))", proofAssumingRight = PFalseE {proofBot = PNotE {form = ~(x ^ (x => y)), proofNotForm = PAx "h ~~(x ^ (x => y))", proofForm = PAx "h ~(x ^ (x => y))"}}}}, proofAntecedent = PAx "h ~~(x ^ (x => y))"}}, proofRight = PAndE2 {left = ~~(x ^ (x => y)), proofAnd = PAx "h ~~(x ^ (x => y)) ^ ~y"}}}, proofAntecedent = PAndE1 {right = ~y, proofAnd = PAx "h ~~(x ^ (x => y)) ^ ~y"}}}}}, proofAntecedent = PNamed {name = "not dist over or LR", proof = PAndI {proofLeft = PNotI {hyp = "h ~(x ^ (x => y))", proofBot = PNotE {form = ~(x ^ (x => y)) v y, proofNotForm = PAx "h ~(~(x ^ (x => y)) v y)", proofForm = POrI1 {proofLeft = PAx "h ~(x ^ (x => y))"}}}, proofRight = PNotI {hyp = "h y", proofBot = PNotE {form = ~(x ^ (x => y)) v y, proofNotForm = PAx "h ~(~(x ^ (x => y)) v y)", proofForm = POrI2 {proofRight = PAx "h y"}}}}}}}, proofAntecedent = PNamed {name = "not cong LR", proof = PNotI {hyp = "h ~(x ^ (x => y)) v y", proofBot = PNotE {form = (x ^ (x => y)) => y, proofNotForm = PAx "h ~((x ^ (x => y)) => y)", proofForm = PNamed {name = "imp elim RL", proof = PImpI {hypAntecedent = "h x ^ (x => y)", proofConsequent = POrE {left = ~(x ^ (x => y)), right = y, proofOr = PAx "h ~(x ^ (x => y)) v y", hypLeft = "h ~(x ^ (x => y))", proofAssumingLeft = PFalseE {proofBot = PNotE {form = x ^ (x => y), proofNotForm = PAx "h ~(x ^ (x => y))", proofForm = PAx "h x ^ (x => y)"}}, hypRight = "h y", proofAssumingRight = PAx "h y"}}}}}}}
{'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y)

proof imp:
Checking
{'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ~(~(x ^ (x => y)) v y) => (((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y))

proof consequent:
Checking
{'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y)

proof imp:
Checking
{'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- (~~(x ^ (x => y)) ^ ~y) => (((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y))

proof consequent:
Checking
{'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y)

proof imp:
Checking
{'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ((x ^ (x => y)) ^ ~y) => (((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y))

proof consequent:
Checking
{'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ((x ^ ~x) ^ ~y) v ((x ^ y) ^ ~y)

proof antecedent:
Checking proof 'and cong1 LR': 
Checking
{'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- (x ^ (~x v y)) ^ ~y

proof imp:
Checking
{'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- (x ^ (x => y)) => ((x ^ (~x v y)) ^ ~y)

proof consequent:
Checking
{'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- (x ^ (~x v y)) ^ ~y

proof left:
Checking proof 'and cong2 LR': 
Checking
{'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- x ^ (~x v y)

proof imp:
Checking
{'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- (x => y) => (x ^ (~x v y))

proof consequent:
Checking
{'h x' : x => y, 'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- x ^ (~x v y)

proof right:
Checking proof 'imp elim LR': 
Checking
{'h x' : x => y, 'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ~x v y

proof assuming left:
Checking
{'h x' : x, 'h x' : x => y, 'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- ~x v y

proof right:
Checking
{'h x' : x, 'h x' : x => y, 'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- y

proof imp:
Check error! hyp h x => y not in env on
proof: PAx "h x => y"
{'h x' : x, 'h x' : x => y, 'h x ^ (x => y)' : x ^ (x => y), 'h (x ^ (x => y)) ^ ~y' : (x ^ (x => y)) ^ ~y, 'h ~~(x ^ (x => y)) ^ ~y' : ~~(x ^ (x => y)) ^ ~y, 'h ~(~(x ^ (x => y)) v y)' : ~(~(x ^ (x => y)) v y), 'h ~((x ^ (x => y)) => y)' : ~((x ^ (x => y)) => y)}
|- x => y