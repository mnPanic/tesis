- Exportar explícitamente en los módulos

- Usar record patterns para data
https://stackoverflow.com/questions/38052553/haskell-record-pattern-matching

- Considerar usar type classes para free variables y subst así evito definir una
para Form y otra para Term


hacer que todo funcione mod alpha renombres

susbst x por z en V z f (x) captura la z cuando no debería

igualda dmod alpha renombre en PAx

para ver que dos forms son alpha eq, tienen que ser igula estructuralmente y que no importe los nombres de las variables ligadas (las libres si)
cuando te encontras con algo uqe liga, las mapeas un dict por form a un nombre que es igual para ambos. Fresco, no se pisa a las anteriores ni con las existentes
cuando te encontras con una var libre la renombras con el dict correspondiente y te fijsa si son iguales.

hacer la sust con el dict tmb

para ligadore si y aparece en el dominio
en vez de si la var liga el termino, tenes que fijar si la var libre liga alugno de los significados

para var frescas,

freshWRT :: Id -> [Id] -> Id
x forbidden = head [ x ++ suffix | suffix <- "":[0..], x++suffix `notElem` forbidden ]

sacar Eq a form para vre en donde se usa y reemplazar explícitamente por EqAlpha

----

ej de por qué necesitas chequear las fv en Exists E

exists x . ~p(x) -> p(x) -> bot

surge de ~V x. P(x) -> ~P(x)

---

cambios en ForallI y ExistsE para poder elegir el nombre de la variable

ForallI toma una nueva var, hay que chequear que no aparezca libre en gamma ni en la form
y sustituir (también sin captura)

ExistsI también cambiar el chequeo de que x está libre por la nueva var, renombrar en A y B

eigen variables

---

lenguaje

- axiomas tienen para todo implicitos

empezar a hacer el parser

único comando el thus

leer by checker
nine steps mizar article
otras cosas de freek
mathematical vernacular más interesante

tal vez una idea de como una prueba se convierte a deducción natural?