-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------

state 29 contains 3 shift/reduce conflicts.
state 30 contains 3 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseExp -> Exp                             (0)
	Exp -> Form                                        (1)
	Form -> id '(' Terms ')'                           (2)
	Form -> Form and Form                              (3)
	Form -> Form or Form                               (4)
	Form -> Form imp Form                              (5)
	Form -> not Form                                   (6)
	Form -> exists var dot Form                        (7)
	Form -> forall var dot Form                        (8)
	Form -> true                                       (9)
	Form -> false                                      (10)
	Term -> var                                        (11)
	Term -> id '(' Terms ')'                           (12)
	Terms ->                                           (13)
	Terms -> Term Terms                                (14)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { TokenOB }
	')'            { TokenCB }
	and            { TokenAnd }
	or             { TokenOr }
	imp            { TokenImp }
	not            { TokenNot }
	true           { TokenTrue }
	false          { TokenFalse }
	forall         { TokenForall }
	exists         { TokenExists }
	dot            { TokenDot }
	id             { TokenId $$ }
	var            { TokenVar $$ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseExp rule  0
	Exp             rule  1
	Form            rules 2, 3, 4, 5, 6, 7, 8, 9, 10
	Term            rules 11, 12
	Terms           rules 13, 14

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseExp -> . Exp                            (rule 0)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Exp            goto state 9
	Form           goto state 2

State 1

	Exp -> . Form                                       (rule 1)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 2

State 2

	Exp -> Form .                                       (rule 1)
	Form -> Form . and Form                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form . imp Form                             (rule 5)

	and            shift, and enter state 14
	or             shift, and enter state 15
	imp            shift, and enter state 16
	%eof           reduce using rule 1


State 3

	Form -> not . Form                                  (rule 6)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 13

State 4

	Form -> true .                                      (rule 9)

	and            reduce using rule 9
	or             reduce using rule 9
	imp            reduce using rule 9
	%eof           reduce using rule 9


State 5

	Form -> false .                                     (rule 10)

	and            reduce using rule 10
	or             reduce using rule 10
	imp            reduce using rule 10
	%eof           reduce using rule 10


State 6

	Form -> forall . var dot Form                       (rule 8)

	var            shift, and enter state 12


State 7

	Form -> exists . var dot Form                       (rule 7)

	var            shift, and enter state 11


State 8

	Form -> id . '(' Terms ')'                          (rule 2)

	'('            shift, and enter state 10


State 9

	%start_parseExp -> Exp .                            (rule 0)

	%eof           accept


State 10

	Form -> id '(' . Terms ')'                          (rule 2)

	')'            reduce using rule 13
	id             shift, and enter state 24
	var            shift, and enter state 25

	Term           goto state 22
	Terms          goto state 23

State 11

	Form -> exists var . dot Form                       (rule 7)

	dot            shift, and enter state 21


State 12

	Form -> forall var . dot Form                       (rule 8)

	dot            shift, and enter state 20


State 13

	Form -> Form . and Form                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form . imp Form                             (rule 5)
	Form -> not Form .                                  (rule 6)

	and            reduce using rule 6
	or             reduce using rule 6
	imp            reduce using rule 6
	%eof           reduce using rule 6


State 14

	Form -> Form and . Form                             (rule 3)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 19

State 15

	Form -> Form or . Form                              (rule 4)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 18

State 16

	Form -> Form imp . Form                             (rule 5)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 17

State 17

	Form -> Form . and Form                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form . imp Form                             (rule 5)
	Form -> Form imp Form .                             (rule 5)

	and            shift, and enter state 14
	or             shift, and enter state 15
	imp            shift, and enter state 16
	%eof           reduce using rule 5


State 18

	Form -> Form . and Form                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form or Form .                              (rule 4)
	Form -> Form . imp Form                             (rule 5)

	and            reduce using rule 4
	or             reduce using rule 4
	imp            reduce using rule 4
	%eof           reduce using rule 4


State 19

	Form -> Form . and Form                             (rule 3)
	Form -> Form and Form .                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form . imp Form                             (rule 5)

	and            reduce using rule 3
	or             reduce using rule 3
	imp            reduce using rule 3
	%eof           reduce using rule 3


State 20

	Form -> forall var dot . Form                       (rule 8)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 30

State 21

	Form -> exists var dot . Form                       (rule 7)

	not            shift, and enter state 3
	true           shift, and enter state 4
	false          shift, and enter state 5
	forall         shift, and enter state 6
	exists         shift, and enter state 7
	id             shift, and enter state 8

	Form           goto state 29

State 22

	Terms -> Term . Terms                               (rule 14)

	')'            reduce using rule 13
	id             shift, and enter state 24
	var            shift, and enter state 25

	Term           goto state 22
	Terms          goto state 28

State 23

	Form -> id '(' Terms . ')'                          (rule 2)

	')'            shift, and enter state 27


State 24

	Term -> id . '(' Terms ')'                          (rule 12)

	'('            shift, and enter state 26


State 25

	Term -> var .                                       (rule 11)

	')'            reduce using rule 11
	id             reduce using rule 11
	var            reduce using rule 11


State 26

	Term -> id '(' . Terms ')'                          (rule 12)

	')'            reduce using rule 13
	id             shift, and enter state 24
	var            shift, and enter state 25

	Term           goto state 22
	Terms          goto state 31

State 27

	Form -> id '(' Terms ')' .                          (rule 2)

	and            reduce using rule 2
	or             reduce using rule 2
	imp            reduce using rule 2
	%eof           reduce using rule 2


State 28

	Terms -> Term Terms .                               (rule 14)

	')'            reduce using rule 14


State 29

	Form -> Form . and Form                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form . imp Form                             (rule 5)
	Form -> exists var dot Form .                       (rule 7)

	and            shift, and enter state 14
			(reduce using rule 7)

	or             shift, and enter state 15
			(reduce using rule 7)

	imp            shift, and enter state 16
			(reduce using rule 7)

	%eof           reduce using rule 7


State 30

	Form -> Form . and Form                             (rule 3)
	Form -> Form . or Form                              (rule 4)
	Form -> Form . imp Form                             (rule 5)
	Form -> forall var dot Form .                       (rule 8)

	and            shift, and enter state 14
			(reduce using rule 8)

	or             shift, and enter state 15
			(reduce using rule 8)

	imp            shift, and enter state 16
			(reduce using rule 8)

	%eof           reduce using rule 8


State 31

	Term -> id '(' Terms . ')'                          (rule 12)

	')'            shift, and enter state 32


State 32

	Term -> id '(' Terms ')' .                          (rule 12)

	')'            reduce using rule 12
	id             reduce using rule 12
	var            reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 15
Number of terminals: 13
Number of non-terminals: 5
Number of states: 33
