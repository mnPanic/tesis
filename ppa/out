Running program... OK!
Translating... check pre-reduce: can't prove theorem 'h': 
Checking 
proof: PForallE {var = "X", form = exists V . p(V, X), proofForall = PForallI {newVar = "X", proofForm = PImpE {antecedent = forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PNamed {name = "proofExists inner", proof = PForallE {var = "X", form = forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofForall = PNamed {name = "t", proof = PNamed {name = "PSLet \"Y\"", proof = PForallI {newVar = "Y", proofForm = PNamed {name = "PSTake \"V\" v", proof = PImpI {hypAntecedent = "__h forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PForallE {var = "V", form = ((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofForall = PAx "__h forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))", termReplace = v}, proofAntecedent = PNamed {name = "PSThusBy p(v, Y) [\"ax\"]", proof = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpE {antecedent = ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h ~~(forall X . p(v, X) -> p(v, Y))", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpI {hypAntecedent = "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = (((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h (((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpI {hypAntecedent = "__h p(v, X) -> exists V . p(V, X)0", proofConsequent = PImpE {antecedent = ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h (((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = p(v, X) -> exists V . p(V, X), proofImp = PAx "__h (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PAx "__h p(v, X) -> exists V . p(V, X)0"}}}}}, proofAntecedent = PImpI {hypAntecedent = "__h ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X), proofImp = PAx "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))", proofAntecedent = PAx "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))"}}}}}}}}}, proofAntecedent = PImpI {hypAntecedent = "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) & (((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) & (((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X), proofImp = PAndE2 {left = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X), proofAnd = PAx "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) & (((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X))"}, proofAntecedent = PAndE1 {right = ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) & (((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X))"}}}, proofAntecedent = PAndI {proofLeft = PImpI {hypAntecedent = "__h forall X . p(v, X) -> p(v, Y)", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)", proofAntecedent = PAx "__h forall X . p(v, X) -> p(v, Y)"}}, proofRight = PImpI {hypAntecedent = "__h ~(forall X . p(v, X) -> p(v, Y))", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpI {hypAntecedent = "__h p(v, X) -> exists V . p(V, X)0", proofConsequent = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X), proofImp = PAx "__h ~~(forall X . p(v, X) -> p(v, Y))", proofAntecedent = PAx "__h ~(forall X . p(v, X) -> p(v, Y))"}}}}}}}}}}}, proofAntecedent = PImpI {hypAntecedent = "__h ~(forall X . p(v, X) -> p(v, Y))", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h forall X . p(v, X) & ~p(v, Y)", proofConsequent = PNamed {name = "forall elimination to dnf", proof = PNamed {name = "cut", proof = PImpE {antecedent = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h p(v, Y) & ~p(v, Y)", proofConsequent = PNamed {name = "dnf to contradiction", proof = PNamed {name = "cut", proof = PImpE {antecedent = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h p(v, Y) & ~p(v, Y)", proofConsequent = PNamed {name = "contradiction of p(v, Y) & ~p(v, Y) by p(v, Y) and ~p(v, Y)", proof = PImpE {antecedent = (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAndE2 {left = (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h p(v, Y) & ~p(v, Y)"}, proofAntecedent = PAndE1 {right = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h p(v, Y) & ~p(v, Y)"}}}}, proofAntecedent = PNamed {name = "dnf", proof = PAx "__h p(v, Y) & ~p(v, Y)"}}}}}, proofAntecedent = PAndI {proofLeft = PNamed {name = "cut", proof = PImpE {antecedent = (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h p(v, Y)", proofConsequent = PAx "__h p(v, Y)"}, proofAntecedent = PForallE {var = "X", form = (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X), proofForall = PAndE1 {right = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h forall X . p(v, X) & ~p(v, Y)"}, termReplace = Y}}}, proofRight = PAndE2 {left = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofAnd = PAx "__h forall X . p(v, X) & ~p(v, Y)"}}}}}}, proofAntecedent = PNamed {name = "dnf", proof = PNamed {name = "cut", proof = PImpE {antecedent = ((((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h ~(~forall X . p(v, X) | p(v, Y))", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h ~~forall X . p(v, X) & ~p(v, Y)", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h forall X . p(v, X) & ~p(v, Y)", proofConsequent = PAx "__h forall X . p(v, X) & ~p(v, Y)"}, proofAntecedent = PNamed {name = "and cong1 LR", proof = PNamed {name = "cut", proof = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h ~~forall X . p(v, X)", proofConsequent = PAndI {proofLeft = PNamed {name = "dneg elim", proof = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h ~~forall X . p(v, X)", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PForallI {newVar = "X", proofForm = PNamed {name = "cut", proof = PImpE {antecedent = (((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h (((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpI {hypAntecedent = "__h p(v, X) -> exists V . p(V, X)0", proofConsequent = PImpE {antecedent = ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h (((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = p(v, X) -> exists V . p(V, X), proofImp = PAx "__h (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PAx "__h p(v, X) -> exists V . p(V, X)0"}}}}}, proofAntecedent = PImpI {hypAntecedent = "__h ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PForallE {var = "X", form = (p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X), proofForall = PAx "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X))", termReplace = X}}}}}}}}}, proofAntecedent = PImpI {hypAntecedent = "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PImpI {hypAntecedent = "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAndE2 {left = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))"}, proofAntecedent = PAndE1 {right = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))"}}}, proofAntecedent = PAndI {proofLeft = PImpI {hypAntecedent = "__h forall X . p(v, X)", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PAx "__h forall X . p(v, X)"}}, proofRight = PImpI {hypAntecedent = "__h ~forall X . p(v, X)", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PForallI {newVar = "X", proofForm = PImpI {hypAntecedent = "__h p(v, X) -> exists V . p(V, X)0", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h ~~forall X . p(v, X)", proofAntecedent = PAx "__h ~forall X . p(v, X)"}}}}}}}}}}}, proofAntecedent = PAx "__h ~~forall X . p(v, X)"}}, proofRight = PAndE2 {left = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h ~~forall X . p(v, X) & ~p(v, Y)"}}}, proofAntecedent = PAndE1 {right = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h ~~forall X . p(v, X) & ~p(v, Y)"}}}}}}}, proofAntecedent = PNamed {name = "not dist over or LR", proof = PAndI {proofLeft = PImpI {hypAntecedent = "__h ~forall X . p(v, X)", proofConsequent = PImpE {antecedent = (((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X), proofImp = PAx "__h ~(~forall X . p(v, X) | p(v, Y))", proofAntecedent = PImpI {hypAntecedent = "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAndE1 {right = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))"}, proofAntecedent = PAx "__h ~forall X . p(v, X)"}}}}, proofRight = PImpI {hypAntecedent = "__h p(v, Y)", proofConsequent = PImpE {antecedent = (((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))) -> exists V . p(V, X), proofImp = PAx "__h ~(~forall X . p(v, X) | p(v, Y))", proofAntecedent = PImpI {hypAntecedent = "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))", proofConsequent = PImpE {antecedent = (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAndE2 {left = (forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofAnd = PAx "__h ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))"}, proofAntecedent = PAx "__h p(v, Y)"}}}}}}}}}, proofAntecedent = PNamed {name = "not cong LR", proof = PImpI {hypAntecedent = "__h ~forall X . p(v, X) | p(v, Y)", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h ~(forall X . p(v, X) -> p(v, Y))", proofAntecedent = PNamed {name = "imp elim RL", proof = PImpI {hypAntecedent = "__h forall X . p(v, X)", proofConsequent = PNamed {name = "cut", proof = PImpE {antecedent = (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpI {hypAntecedent = "__h p(v, Y) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = p(v, Y) -> exists V . p(V, X), proofImp = PAx "__h (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PAx "__h p(v, Y) -> exists V . p(V, X)"}}}}}, proofAntecedent = PImpI {hypAntecedent = "__h ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = ((forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) & (((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h ~forall X . p(v, X) | p(v, Y)", proofAntecedent = PAndI {proofLeft = PImpI {hypAntecedent = "__h ~forall X . p(v, X)", proofConsequent = PImpE {antecedent = (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PImpI {hypAntecedent = "__h p(v, Y) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = forall X . ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)), proofImp = PAx "__h ~forall X . p(v, X)", proofAntecedent = PAx "__h forall X . p(v, X)"}}}}, proofRight = PImpI {hypAntecedent = "__h p(v, Y)", proofConsequent = PImpE {antecedent = (p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X), proofImp = PAx "__h ((p(v, Y) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PAx "__h p(v, Y)"}}}}}}}}}}}}}}}}}}}, proofAntecedent = PNamed {name = "axiom ax translation intro", proof = PNamed {name = "cut", proof = PImpE {antecedent = forall X . p(v, X), proofImp = PImpI {hypAntecedent = "ax", proofConsequent = PForallI {newVar = "X", proofForm = PNamed {name = "cut", proof = PImpE {antecedent = p(v, X), proofImp = PImpI {hypAntecedent = "__h p(v, X)", proofConsequent = PImpI {hypAntecedent = "__h p(v, X) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = p(v, X), proofImp = PAx "__h p(v, X) -> exists V . p(V, X)", proofAntecedent = PAx "__h p(v, X)"}}}, proofAntecedent = PForallE {var = "X", form = p(v, X), proofForall = PAx "ax", termReplace = X}}}}}, proofAntecedent = PAx "ax"}}}}}}}}}}}, termReplace = X}}, proofAntecedent = PForallI {newVar = "V", proofForm = PNamed {name = "cut", proof = PImpE {antecedent = p(V, X) -> exists V . p(V, X), proofImp = PImpI {hypAntecedent = "__h p(V, X) -> exists V . p(V, X)", proofConsequent = PImpI {hypAntecedent = "__h (p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)", proofConsequent = PImpE {antecedent = p(V, X) -> exists V . p(V, X), proofImp = PAx "__h (p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)", proofAntecedent = PAx "__h p(V, X) -> exists V . p(V, X)"}}}, proofAntecedent = PImpI {hypAntecedent = "__h p(V, X)", proofConsequent = PExistsI {inst = V, proofFormWithInst = PAx "__h p(V, X)"}}}}}}}, termReplace = a}
{'ax' : forall X . p(v, X)}
|- exists V . p(V, a)

(PForallE) proof forall:
Checking
{'ax' : forall X . p(v, X)}
|- forall X . exists V . p(V, X)

(PForallI) proof form:
Checking
{'ax' : forall X . p(v, X)}
|- exists V . p(V, X)

(PImpE) proof imp:
Checking proof 'proofExists inner': 
Checking
{'ax' : forall X . p(v, X)}
|- forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)

(PForallE) proof forall:
Checking proof 't': 
Checking proof 'PSLet "Y"': 
Checking
{'ax' : forall X . p(v, X)}
|- forall X . (forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))

(PForallI) proof form:
Checking proof 'PSTake "V" v': 
Checking
{'ax' : forall X . p(v, X)}
|- forall V . (((p(V, Y) -> exists V . p(V, Y)) -> exists V . p(V, Y)) -> exists V . p(V, Y)) -> exists V . p(V, Y)

(PImpI) proof consequent:
Checking
{'__h forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))' : forall V . (((p(V, Y) -> exists V . p(V, Y)) -> exists V . p(V, Y)) -> exists V . p(V, Y)), 'ax' : forall X . p(v, X)}
|- exists V . p(V, Y)

(PImpE) proof imp:
Check error! form ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, Y) /= (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X)){V := v} on
proof: PForallE {var = "V", form = ((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X), proofForall = PAx "__h forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))", termReplace = v}
{'__h forall V . (((p(V, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, X))' : forall V . (((p(V, Y) -> exists V . p(V, Y)) -> exists V . p(V, Y)) -> exists V . p(V, Y)), 'ax' : forall X . p(v, X)}
|- ((p(v, X) -> exists V . p(V, X)) -> exists V . p(V, X)) -> exists V . p(V, Y)
