-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Parser.y
-----------------------------------------------------------------------------

state 95 contains 1 shift/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	Prog -> Declarations                               (1)
	Declarations -> Declaration Declarations           (2)
	Declarations -> Declaration                        (3)
	Declaration -> Axiom                               (4)
	Declaration -> Theorem                             (5)
	Axiom -> axiom Name ':' Form                       (6)
	Theorem -> theorem Name ':' Form proof ProofStart end   (7)
	ProofStart -> Proof                                (8)
	ProofStart ->                                      (9)
	Proof -> ProofStep Proof                           (10)
	Proof -> ProofStep                                 (11)
	ProofStep -> suppose Name ':' Form                 (12)
	ProofStep -> thus Form OptionalBy                  (13)
	ProofStep -> hence Form OptionalBy                 (14)
	ProofStep -> have Name ':' Form OptionalBy         (15)
	ProofStep -> then Name ':' Form OptionalBy         (16)
	ProofStep -> equivalently Form                     (17)
	ProofStep -> claim Name ':' Form proof Proof end   (18)
	ProofStep -> cases by Justification Cases end      (19)
	Cases -> Case Cases                                (20)
	Cases -> Case                                      (21)
	Case -> case Form Proof                            (22)
	Case -> case Name Form Proof                       (23)
	OptionalBy -> by Justification                     (24)
	OptionalBy ->                                      (25)
	Justification -> Name ',' Justification            (26)
	Justification -> Name                              (27)
	Name -> id                                         (28)
	Name -> name                                       (29)
	Form -> id TermArgs                                (30)
	Form -> Form and Form                              (31)
	Form -> Form or Form                               (32)
	Form -> Form imp Form                              (33)
	Form -> not Form                                   (34)
	Form -> exists var dot Form                        (35)
	Form -> forall var dot Form                        (36)
	Form -> true                                       (37)
	Form -> false                                      (38)
	Form -> '(' Form ')'                               (39)
	Term -> var                                        (40)
	Term -> id TermArgs                                (41)
	TermArgs ->                                        (42)
	TermArgs -> '(' Terms ')'                          (43)
	Terms -> Term                                      (44)
	Terms -> Term ',' Terms                            (45)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { Token _ TokenParenOpen }
	')'            { Token _ TokenParenClose }
	and            { Token _ TokenAnd }
	or             { Token _ TokenOr }
	imp            { Token _ TokenImp }
	not            { Token _ TokenNot }
	true           { Token _ TokenTrue }
	false          { Token _ TokenFalse }
	forall         { Token _ TokenForall }
	exists         { Token _ TokenExists }
	dot            { Token _ TokenDot }
	id             { Token _ (TokenId $$) }
	var            { Token _ (TokenVar $$) }
	':'            { Token _ TokenDoubleColon }
	','            { Token _ TokenComma }
	axiom          { Token _ TokenAxiom }
	theorem        { Token _ TokenTheorem }
	proof          { Token _ TokenProof }
	end            { Token _ TokenEnd }
	name           { Token _ (TokenQuotedName $$) }
	suppose        { Token _ TokenSuppose }
	thus           { Token _ TokenThus }
	then           { Token _ TokenThen }
	hence          { Token _ TokenHence }
	have           { Token _ TokenHave }
	by             { Token _ TokenBy }
	equivalently   { Token _ TokenEquivalently }
	claim          { Token _ TokenClaim }
	case           { Token _ TokenCase }
	cases          { Token _ TokenCases }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prog            rule  1
	Declarations    rules 2, 3
	Declaration     rules 4, 5
	Axiom           rule  6
	Theorem         rule  7
	ProofStart      rules 8, 9
	Proof           rules 10, 11
	ProofStep       rules 12, 13, 14, 15, 16, 17, 18, 19
	Cases           rules 20, 21
	Case            rules 22, 23
	OptionalBy      rules 24, 25
	Justification   rules 26, 27
	Name            rules 28, 29
	Form            rules 30, 31, 32, 33, 34, 35, 36, 37, 38, 39
	Term            rules 40, 41
	TermArgs        rules 42, 43
	Terms           rules 44, 45

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Prog                              (rule 0)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7

	Prog           goto state 8
	Declarations   goto state 2
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 1

	Prog -> . Declarations                              (rule 1)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7

	Declarations   goto state 2
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 2

	Prog -> Declarations .                              (rule 1)

	%eof           reduce using rule 1


State 3

	Declarations -> Declaration . Declarations          (rule 2)
	Declarations -> Declaration .                       (rule 3)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7
	%eof           reduce using rule 3

	Declarations   goto state 13
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 4

	Declaration -> Axiom .                              (rule 4)

	axiom          reduce using rule 4
	theorem        reduce using rule 4
	%eof           reduce using rule 4


State 5

	Declaration -> Theorem .                            (rule 5)

	axiom          reduce using rule 5
	theorem        reduce using rule 5
	%eof           reduce using rule 5


State 6

	Axiom -> axiom . Name ':' Form                      (rule 6)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 12

State 7

	Theorem -> theorem . Name ':' Form proof ProofStart end    (rule 7)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 9

State 8

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 9

	Theorem -> theorem Name . ':' Form proof ProofStart end    (rule 7)

	':'            shift, and enter state 15


State 10

	Name -> id .                                        (rule 28)

	':'            reduce using rule 28
	','            reduce using rule 28
	end            reduce using rule 28
	suppose        reduce using rule 28
	thus           reduce using rule 28
	then           reduce using rule 28
	hence          reduce using rule 28
	have           reduce using rule 28
	equivalently   reduce using rule 28
	claim          reduce using rule 28
	case           reduce using rule 28
	cases          reduce using rule 28


State 11

	Name -> name .                                      (rule 29)

	'('            reduce using rule 29
	not            reduce using rule 29
	true           reduce using rule 29
	false          reduce using rule 29
	forall         reduce using rule 29
	exists         reduce using rule 29
	id             reduce using rule 29
	':'            reduce using rule 29
	','            reduce using rule 29
	end            reduce using rule 29
	suppose        reduce using rule 29
	thus           reduce using rule 29
	then           reduce using rule 29
	hence          reduce using rule 29
	have           reduce using rule 29
	equivalently   reduce using rule 29
	claim          reduce using rule 29
	case           reduce using rule 29
	cases          reduce using rule 29


State 12

	Axiom -> axiom Name . ':' Form                      (rule 6)

	':'            shift, and enter state 14


State 13

	Declarations -> Declaration Declarations .          (rule 2)

	%eof           reduce using rule 2


State 14

	Axiom -> axiom Name ':' . Form                      (rule 6)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 24

State 15

	Theorem -> theorem Name ':' . Form proof ProofStart end    (rule 7)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 16

State 16

	Theorem -> theorem Name ':' Form . proof ProofStart end    (rule 7)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	proof          shift, and enter state 34


State 17

	Form -> '(' . Form ')'                              (rule 39)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 33

State 18

	Form -> not . Form                                  (rule 34)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 32

State 19

	Form -> true .                                      (rule 37)

	')'            reduce using rule 37
	and            reduce using rule 37
	or             reduce using rule 37
	imp            reduce using rule 37
	axiom          reduce using rule 37
	theorem        reduce using rule 37
	proof          reduce using rule 37
	end            reduce using rule 37
	suppose        reduce using rule 37
	thus           reduce using rule 37
	then           reduce using rule 37
	hence          reduce using rule 37
	have           reduce using rule 37
	by             reduce using rule 37
	equivalently   reduce using rule 37
	claim          reduce using rule 37
	case           reduce using rule 37
	cases          reduce using rule 37
	%eof           reduce using rule 37


State 20

	Form -> false .                                     (rule 38)

	')'            reduce using rule 38
	and            reduce using rule 38
	or             reduce using rule 38
	imp            reduce using rule 38
	axiom          reduce using rule 38
	theorem        reduce using rule 38
	proof          reduce using rule 38
	end            reduce using rule 38
	suppose        reduce using rule 38
	thus           reduce using rule 38
	then           reduce using rule 38
	hence          reduce using rule 38
	have           reduce using rule 38
	by             reduce using rule 38
	equivalently   reduce using rule 38
	claim          reduce using rule 38
	case           reduce using rule 38
	cases          reduce using rule 38
	%eof           reduce using rule 38


State 21

	Form -> forall . var dot Form                       (rule 36)

	var            shift, and enter state 31


State 22

	Form -> exists . var dot Form                       (rule 35)

	var            shift, and enter state 30


State 23

	Form -> id . TermArgs                               (rule 30)

	'('            shift, and enter state 29
	')'            reduce using rule 42
	and            reduce using rule 42
	or             reduce using rule 42
	imp            reduce using rule 42
	axiom          reduce using rule 42
	theorem        reduce using rule 42
	proof          reduce using rule 42
	end            reduce using rule 42
	suppose        reduce using rule 42
	thus           reduce using rule 42
	then           reduce using rule 42
	hence          reduce using rule 42
	have           reduce using rule 42
	by             reduce using rule 42
	equivalently   reduce using rule 42
	claim          reduce using rule 42
	case           reduce using rule 42
	cases          reduce using rule 42
	%eof           reduce using rule 42

	TermArgs       goto state 28

State 24

	Axiom -> axiom Name ':' Form .                      (rule 6)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	axiom          reduce using rule 6
	theorem        reduce using rule 6
	%eof           reduce using rule 6


State 25

	Form -> Form and . Form                             (rule 31)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 55

State 26

	Form -> Form or . Form                              (rule 32)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 54

State 27

	Form -> Form imp . Form                             (rule 33)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 53

State 28

	Form -> id TermArgs .                               (rule 30)

	')'            reduce using rule 30
	and            reduce using rule 30
	or             reduce using rule 30
	imp            reduce using rule 30
	axiom          reduce using rule 30
	theorem        reduce using rule 30
	proof          reduce using rule 30
	end            reduce using rule 30
	suppose        reduce using rule 30
	thus           reduce using rule 30
	then           reduce using rule 30
	hence          reduce using rule 30
	have           reduce using rule 30
	by             reduce using rule 30
	equivalently   reduce using rule 30
	claim          reduce using rule 30
	case           reduce using rule 30
	cases          reduce using rule 30
	%eof           reduce using rule 30


State 29

	TermArgs -> '(' . Terms ')'                         (rule 43)

	id             shift, and enter state 51
	var            shift, and enter state 52

	Term           goto state 49
	Terms          goto state 50

State 30

	Form -> exists var . dot Form                       (rule 35)

	dot            shift, and enter state 48


State 31

	Form -> forall var . dot Form                       (rule 36)

	dot            shift, and enter state 47


State 32

	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)
	Form -> not Form .                                  (rule 34)

	')'            reduce using rule 34
	and            reduce using rule 34
	or             reduce using rule 34
	imp            reduce using rule 34
	axiom          reduce using rule 34
	theorem        reduce using rule 34
	proof          reduce using rule 34
	end            reduce using rule 34
	suppose        reduce using rule 34
	thus           reduce using rule 34
	then           reduce using rule 34
	hence          reduce using rule 34
	have           reduce using rule 34
	by             reduce using rule 34
	equivalently   reduce using rule 34
	claim          reduce using rule 34
	case           reduce using rule 34
	cases          reduce using rule 34
	%eof           reduce using rule 34


State 33

	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)
	Form -> '(' Form . ')'                              (rule 39)

	')'            shift, and enter state 46
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27


State 34

	Theorem -> theorem Name ':' Form proof . ProofStart end    (rule 7)

	end            reduce using rule 9
	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44
	cases          shift, and enter state 45

	ProofStart     goto state 35
	Proof          goto state 36
	ProofStep      goto state 37

State 35

	Theorem -> theorem Name ':' Form proof ProofStart . end    (rule 7)

	end            shift, and enter state 70


State 36

	ProofStart -> Proof .                               (rule 8)

	end            reduce using rule 8


State 37

	Proof -> ProofStep . Proof                          (rule 10)
	Proof -> ProofStep .                                (rule 11)

	end            reduce using rule 11
	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44
	case           reduce using rule 11
	cases          shift, and enter state 45

	Proof          goto state 69
	ProofStep      goto state 37

State 38

	ProofStep -> suppose . Name ':' Form                (rule 12)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 68

State 39

	ProofStep -> thus . Form OptionalBy                 (rule 13)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 67

State 40

	ProofStep -> then . Name ':' Form OptionalBy        (rule 16)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 66

State 41

	ProofStep -> hence . Form OptionalBy                (rule 14)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 65

State 42

	ProofStep -> have . Name ':' Form OptionalBy        (rule 15)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 64

State 43

	ProofStep -> equivalently . Form                    (rule 17)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 63

State 44

	ProofStep -> claim . Name ':' Form proof Proof end    (rule 18)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 62

State 45

	ProofStep -> cases . by Justification Cases end     (rule 19)

	by             shift, and enter state 61


State 46

	Form -> '(' Form ')' .                              (rule 39)

	')'            reduce using rule 39
	and            reduce using rule 39
	or             reduce using rule 39
	imp            reduce using rule 39
	axiom          reduce using rule 39
	theorem        reduce using rule 39
	proof          reduce using rule 39
	end            reduce using rule 39
	suppose        reduce using rule 39
	thus           reduce using rule 39
	then           reduce using rule 39
	hence          reduce using rule 39
	have           reduce using rule 39
	by             reduce using rule 39
	equivalently   reduce using rule 39
	claim          reduce using rule 39
	case           reduce using rule 39
	cases          reduce using rule 39
	%eof           reduce using rule 39


State 47

	Form -> forall var dot . Form                       (rule 36)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 60

State 48

	Form -> exists var dot . Form                       (rule 35)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 59

State 49

	Terms -> Term .                                     (rule 44)
	Terms -> Term . ',' Terms                           (rule 45)

	')'            reduce using rule 44
	','            shift, and enter state 58


State 50

	TermArgs -> '(' Terms . ')'                         (rule 43)

	')'            shift, and enter state 57


State 51

	Term -> id . TermArgs                               (rule 41)

	'('            shift, and enter state 29
	')'            reduce using rule 42
	','            reduce using rule 42

	TermArgs       goto state 56

State 52

	Term -> var .                                       (rule 40)

	')'            reduce using rule 40
	','            reduce using rule 40


State 53

	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)
	Form -> Form imp Form .                             (rule 33)

	')'            reduce using rule 33
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	axiom          reduce using rule 33
	theorem        reduce using rule 33
	proof          reduce using rule 33
	end            reduce using rule 33
	suppose        reduce using rule 33
	thus           reduce using rule 33
	then           reduce using rule 33
	hence          reduce using rule 33
	have           reduce using rule 33
	by             reduce using rule 33
	equivalently   reduce using rule 33
	claim          reduce using rule 33
	case           reduce using rule 33
	cases          reduce using rule 33
	%eof           reduce using rule 33


State 54

	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form or Form .                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	')'            reduce using rule 32
	and            reduce using rule 32
	or             reduce using rule 32
	imp            reduce using rule 32
	axiom          reduce using rule 32
	theorem        reduce using rule 32
	proof          reduce using rule 32
	end            reduce using rule 32
	suppose        reduce using rule 32
	thus           reduce using rule 32
	then           reduce using rule 32
	hence          reduce using rule 32
	have           reduce using rule 32
	by             reduce using rule 32
	equivalently   reduce using rule 32
	claim          reduce using rule 32
	case           reduce using rule 32
	cases          reduce using rule 32
	%eof           reduce using rule 32


State 55

	Form -> Form . and Form                             (rule 31)
	Form -> Form and Form .                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	')'            reduce using rule 31
	and            reduce using rule 31
	or             reduce using rule 31
	imp            reduce using rule 31
	axiom          reduce using rule 31
	theorem        reduce using rule 31
	proof          reduce using rule 31
	end            reduce using rule 31
	suppose        reduce using rule 31
	thus           reduce using rule 31
	then           reduce using rule 31
	hence          reduce using rule 31
	have           reduce using rule 31
	by             reduce using rule 31
	equivalently   reduce using rule 31
	claim          reduce using rule 31
	case           reduce using rule 31
	cases          reduce using rule 31
	%eof           reduce using rule 31


State 56

	Term -> id TermArgs .                               (rule 41)

	')'            reduce using rule 41
	','            reduce using rule 41


State 57

	TermArgs -> '(' Terms ')' .                         (rule 43)

	')'            reduce using rule 43
	and            reduce using rule 43
	or             reduce using rule 43
	imp            reduce using rule 43
	','            reduce using rule 43
	axiom          reduce using rule 43
	theorem        reduce using rule 43
	proof          reduce using rule 43
	end            reduce using rule 43
	suppose        reduce using rule 43
	thus           reduce using rule 43
	then           reduce using rule 43
	hence          reduce using rule 43
	have           reduce using rule 43
	by             reduce using rule 43
	equivalently   reduce using rule 43
	claim          reduce using rule 43
	case           reduce using rule 43
	cases          reduce using rule 43
	%eof           reduce using rule 43


State 58

	Terms -> Term ',' . Terms                           (rule 45)

	id             shift, and enter state 51
	var            shift, and enter state 52

	Term           goto state 49
	Terms          goto state 80

State 59

	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)
	Form -> exists var dot Form .                       (rule 35)

	')'            reduce using rule 35
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	axiom          reduce using rule 35
	theorem        reduce using rule 35
	proof          reduce using rule 35
	end            reduce using rule 35
	suppose        reduce using rule 35
	thus           reduce using rule 35
	then           reduce using rule 35
	hence          reduce using rule 35
	have           reduce using rule 35
	by             reduce using rule 35
	equivalently   reduce using rule 35
	claim          reduce using rule 35
	case           reduce using rule 35
	cases          reduce using rule 35
	%eof           reduce using rule 35


State 60

	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)
	Form -> forall var dot Form .                       (rule 36)

	')'            reduce using rule 36
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	axiom          reduce using rule 36
	theorem        reduce using rule 36
	proof          reduce using rule 36
	end            reduce using rule 36
	suppose        reduce using rule 36
	thus           reduce using rule 36
	then           reduce using rule 36
	hence          reduce using rule 36
	have           reduce using rule 36
	by             reduce using rule 36
	equivalently   reduce using rule 36
	claim          reduce using rule 36
	case           reduce using rule 36
	cases          reduce using rule 36
	%eof           reduce using rule 36


State 61

	ProofStep -> cases by . Justification Cases end     (rule 19)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Justification  goto state 78
	Name           goto state 79

State 62

	ProofStep -> claim Name . ':' Form proof Proof end    (rule 18)

	':'            shift, and enter state 77


State 63

	ProofStep -> equivalently Form .                    (rule 17)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	end            reduce using rule 17
	suppose        reduce using rule 17
	thus           reduce using rule 17
	then           reduce using rule 17
	hence          reduce using rule 17
	have           reduce using rule 17
	equivalently   reduce using rule 17
	claim          reduce using rule 17
	case           reduce using rule 17
	cases          reduce using rule 17


State 64

	ProofStep -> have Name . ':' Form OptionalBy        (rule 15)

	':'            shift, and enter state 76


State 65

	ProofStep -> hence Form . OptionalBy                (rule 14)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	end            reduce using rule 25
	suppose        reduce using rule 25
	thus           reduce using rule 25
	then           reduce using rule 25
	hence          reduce using rule 25
	have           reduce using rule 25
	by             shift, and enter state 73
	equivalently   reduce using rule 25
	claim          reduce using rule 25
	case           reduce using rule 25
	cases          reduce using rule 25

	OptionalBy     goto state 75

State 66

	ProofStep -> then Name . ':' Form OptionalBy        (rule 16)

	':'            shift, and enter state 74


State 67

	ProofStep -> thus Form . OptionalBy                 (rule 13)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	end            reduce using rule 25
	suppose        reduce using rule 25
	thus           reduce using rule 25
	then           reduce using rule 25
	hence          reduce using rule 25
	have           reduce using rule 25
	by             shift, and enter state 73
	equivalently   reduce using rule 25
	claim          reduce using rule 25
	case           reduce using rule 25
	cases          reduce using rule 25

	OptionalBy     goto state 72

State 68

	ProofStep -> suppose Name . ':' Form                (rule 12)

	':'            shift, and enter state 71


State 69

	Proof -> ProofStep Proof .                          (rule 10)

	end            reduce using rule 10
	case           reduce using rule 10


State 70

	Theorem -> theorem Name ':' Form proof ProofStart end .    (rule 7)

	axiom          reduce using rule 7
	theorem        reduce using rule 7
	%eof           reduce using rule 7


State 71

	ProofStep -> suppose Name ':' . Form                (rule 12)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 89

State 72

	ProofStep -> thus Form OptionalBy .                 (rule 13)

	end            reduce using rule 13
	suppose        reduce using rule 13
	thus           reduce using rule 13
	then           reduce using rule 13
	hence          reduce using rule 13
	have           reduce using rule 13
	equivalently   reduce using rule 13
	claim          reduce using rule 13
	case           reduce using rule 13
	cases          reduce using rule 13


State 73

	OptionalBy -> by . Justification                    (rule 24)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Justification  goto state 88
	Name           goto state 79

State 74

	ProofStep -> then Name ':' . Form OptionalBy        (rule 16)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 87

State 75

	ProofStep -> hence Form OptionalBy .                (rule 14)

	end            reduce using rule 14
	suppose        reduce using rule 14
	thus           reduce using rule 14
	then           reduce using rule 14
	hence          reduce using rule 14
	have           reduce using rule 14
	equivalently   reduce using rule 14
	claim          reduce using rule 14
	case           reduce using rule 14
	cases          reduce using rule 14


State 76

	ProofStep -> have Name ':' . Form OptionalBy        (rule 15)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 86

State 77

	ProofStep -> claim Name ':' . Form proof Proof end    (rule 18)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 85

State 78

	ProofStep -> cases by Justification . Cases end     (rule 19)

	case           shift, and enter state 84

	Cases          goto state 82
	Case           goto state 83

State 79

	Justification -> Name . ',' Justification           (rule 26)
	Justification -> Name .                             (rule 27)

	','            shift, and enter state 81
	end            reduce using rule 27
	suppose        reduce using rule 27
	thus           reduce using rule 27
	then           reduce using rule 27
	hence          reduce using rule 27
	have           reduce using rule 27
	equivalently   reduce using rule 27
	claim          reduce using rule 27
	case           reduce using rule 27
	cases          reduce using rule 27


State 80

	Terms -> Term ',' Terms .                           (rule 45)

	')'            reduce using rule 45


State 81

	Justification -> Name ',' . Justification           (rule 26)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Justification  goto state 98
	Name           goto state 79

State 82

	ProofStep -> cases by Justification Cases . end     (rule 19)

	end            shift, and enter state 97


State 83

	Cases -> Case . Cases                               (rule 20)
	Cases -> Case .                                     (rule 21)

	end            reduce using rule 21
	case           shift, and enter state 84

	Cases          goto state 96
	Case           goto state 83

State 84

	Case -> case . Form Proof                           (rule 22)
	Case -> case . Name Form Proof                      (rule 23)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 95
	name           shift, and enter state 11

	Name           goto state 93
	Form           goto state 94

State 85

	ProofStep -> claim Name ':' Form . proof Proof end    (rule 18)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	proof          shift, and enter state 92


State 86

	ProofStep -> have Name ':' Form . OptionalBy        (rule 15)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	end            reduce using rule 25
	suppose        reduce using rule 25
	thus           reduce using rule 25
	then           reduce using rule 25
	hence          reduce using rule 25
	have           reduce using rule 25
	by             shift, and enter state 73
	equivalently   reduce using rule 25
	claim          reduce using rule 25
	case           reduce using rule 25
	cases          reduce using rule 25

	OptionalBy     goto state 91

State 87

	ProofStep -> then Name ':' Form . OptionalBy        (rule 16)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	end            reduce using rule 25
	suppose        reduce using rule 25
	thus           reduce using rule 25
	then           reduce using rule 25
	hence          reduce using rule 25
	have           reduce using rule 25
	by             shift, and enter state 73
	equivalently   reduce using rule 25
	claim          reduce using rule 25
	case           reduce using rule 25
	cases          reduce using rule 25

	OptionalBy     goto state 90

State 88

	OptionalBy -> by Justification .                    (rule 24)

	end            reduce using rule 24
	suppose        reduce using rule 24
	thus           reduce using rule 24
	then           reduce using rule 24
	hence          reduce using rule 24
	have           reduce using rule 24
	equivalently   reduce using rule 24
	claim          reduce using rule 24
	case           reduce using rule 24
	cases          reduce using rule 24


State 89

	ProofStep -> suppose Name ':' Form .                (rule 12)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	end            reduce using rule 12
	suppose        reduce using rule 12
	thus           reduce using rule 12
	then           reduce using rule 12
	hence          reduce using rule 12
	have           reduce using rule 12
	equivalently   reduce using rule 12
	claim          reduce using rule 12
	case           reduce using rule 12
	cases          reduce using rule 12


State 90

	ProofStep -> then Name ':' Form OptionalBy .        (rule 16)

	end            reduce using rule 16
	suppose        reduce using rule 16
	thus           reduce using rule 16
	then           reduce using rule 16
	hence          reduce using rule 16
	have           reduce using rule 16
	equivalently   reduce using rule 16
	claim          reduce using rule 16
	case           reduce using rule 16
	cases          reduce using rule 16


State 91

	ProofStep -> have Name ':' Form OptionalBy .        (rule 15)

	end            reduce using rule 15
	suppose        reduce using rule 15
	thus           reduce using rule 15
	then           reduce using rule 15
	hence          reduce using rule 15
	have           reduce using rule 15
	equivalently   reduce using rule 15
	claim          reduce using rule 15
	case           reduce using rule 15
	cases          reduce using rule 15


State 92

	ProofStep -> claim Name ':' Form proof . Proof end    (rule 18)

	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44
	cases          shift, and enter state 45

	Proof          goto state 101
	ProofStep      goto state 37

State 93

	Case -> case Name . Form Proof                      (rule 23)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 100

State 94

	Case -> case Form . Proof                           (rule 22)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44
	cases          shift, and enter state 45

	Proof          goto state 99
	ProofStep      goto state 37

State 95

	Name -> id .                                        (rule 28)
	Form -> id . TermArgs                               (rule 30)

	'('            shift, and enter state 29
			(reduce using rule 28)

	and            reduce using rule 42
	or             reduce using rule 42
	imp            reduce using rule 42
	not            reduce using rule 28
	true           reduce using rule 28
	false          reduce using rule 28
	forall         reduce using rule 28
	exists         reduce using rule 28
	id             reduce using rule 28
	suppose        reduce using rule 42
	thus           reduce using rule 42
	then           reduce using rule 42
	hence          reduce using rule 42
	have           reduce using rule 42
	equivalently   reduce using rule 42
	claim          reduce using rule 42
	cases          reduce using rule 42

	TermArgs       goto state 28

State 96

	Cases -> Case Cases .                               (rule 20)

	end            reduce using rule 20


State 97

	ProofStep -> cases by Justification Cases end .     (rule 19)

	end            reduce using rule 19
	suppose        reduce using rule 19
	thus           reduce using rule 19
	then           reduce using rule 19
	hence          reduce using rule 19
	have           reduce using rule 19
	equivalently   reduce using rule 19
	claim          reduce using rule 19
	case           reduce using rule 19
	cases          reduce using rule 19


State 98

	Justification -> Name ',' Justification .           (rule 26)

	end            reduce using rule 26
	suppose        reduce using rule 26
	thus           reduce using rule 26
	then           reduce using rule 26
	hence          reduce using rule 26
	have           reduce using rule 26
	equivalently   reduce using rule 26
	claim          reduce using rule 26
	case           reduce using rule 26
	cases          reduce using rule 26


State 99

	Case -> case Form Proof .                           (rule 22)

	end            reduce using rule 22
	case           reduce using rule 22


State 100

	Case -> case Name Form . Proof                      (rule 23)
	Form -> Form . and Form                             (rule 31)
	Form -> Form . or Form                              (rule 32)
	Form -> Form . imp Form                             (rule 33)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44
	cases          shift, and enter state 45

	Proof          goto state 103
	ProofStep      goto state 37

State 101

	ProofStep -> claim Name ':' Form proof Proof . end    (rule 18)

	end            shift, and enter state 102


State 102

	ProofStep -> claim Name ':' Form proof Proof end .    (rule 18)

	end            reduce using rule 18
	suppose        reduce using rule 18
	thus           reduce using rule 18
	then           reduce using rule 18
	hence          reduce using rule 18
	have           reduce using rule 18
	equivalently   reduce using rule 18
	claim          reduce using rule 18
	case           reduce using rule 18
	cases          reduce using rule 18


State 103

	Case -> case Name Form Proof .                      (rule 23)

	end            reduce using rule 23
	case           reduce using rule 23


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 46
Number of terminals: 30
Number of non-terminals: 18
Number of states: 104
