-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/PPA/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	%start_hParseProgram -> Prog                       (1)
	%start_hParseTerm -> Term                          (2)
	Prog -> Declarations                               (3)
	Declarations -> Declaration Declarations           (4)
	Declarations -> Declaration                        (5)
	Declaration -> Axiom                               (6)
	Declaration -> Theorem                             (7)
	Axiom -> axiom Name ':' Form                       (8)
	Theorem -> theorem Name ':' Form proof Proof end   (9)
	Proof -> ProofStep Proof                           (10)
	Proof ->                                           (11)
	ProofStep -> suppose Name ':' Form                 (12)
	ProofStep -> thus Form OptionalBy                  (13)
	ProofStep -> hence Form OptionalBy                 (14)
	ProofStep -> have Name ':' Form OptionalBy         (15)
	ProofStep -> then Name ':' Form OptionalBy         (16)
	ProofStep -> equivalently Form                     (17)
	ProofStep -> claim Name ':' Form proof Proof end   (18)
	ProofStep -> cases OptionalBy Cases end            (19)
	ProofStep -> take var ':=' Term                    (20)
	ProofStep -> let var                               (21)
	ProofStep -> consider var st Name ':' Form by Justification   (22)
	Cases -> Case Cases                                (23)
	Cases ->                                           (24)
	Case -> case Form Proof                            (25)
	Case -> case Name ':' Form Proof                   (26)
	OptionalBy -> by Justification                     (27)
	OptionalBy ->                                      (28)
	Justification -> Name ',' Justification            (29)
	Justification -> Name                              (30)
	Name -> id                                         (31)
	Name -> name                                       (32)
	Form -> id TermArgs                                (33)
	Form -> Term id Term                               (34)
	Form -> Form and Form                              (35)
	Form -> Form or Form                               (36)
	Form -> Form imp Form                              (37)
	Form -> Form iff Form                              (38)
	Form -> not Form                                   (39)
	Form -> exists var dot Form                        (40)
	Form -> forall var dot Form                        (41)
	Form -> true                                       (42)
	Form -> false                                      (43)
	Form -> '(' Form ')'                               (44)
	Term -> var                                        (45)
	Term -> id TermArgs                                (46)
	Term -> Term '`' id '`' TermNoInfix                (47)
	TermNoInfix -> var                                 (48)
	TermNoInfix -> id TermArgs                         (49)
	TermArgs ->                                        (50)
	TermArgs -> '(' Terms ')'                          (51)
	Terms -> Term                                      (52)
	Terms -> Term ',' Terms                            (53)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { Token _ TokenParenOpen }
	')'            { Token _ TokenParenClose }
	and            { Token _ TokenAnd }
	or             { Token _ TokenOr }
	imp            { Token _ TokenImp }
	iff            { Token _ TokenIff }
	not            { Token _ TokenNot }
	true           { Token _ TokenTrue }
	false          { Token _ TokenFalse }
	forall         { Token _ TokenForall }
	exists         { Token _ TokenExists }
	dot            { Token _ TokenDot }
	id             { Token _ (TokenId $$) }
	var            { Token _ (TokenVar $$) }
	':'            { Token _ TokenDoubleColon }
	','            { Token _ TokenComma }
	axiom          { Token _ TokenAxiom }
	theorem        { Token _ TokenTheorem }
	proof          { Token _ TokenProof }
	end            { Token _ TokenEnd }
	name           { Token _ (TokenQuotedName $$) }
	suppose        { Token _ TokenSuppose }
	thus           { Token _ TokenThus }
	then           { Token _ TokenThen }
	hence          { Token _ TokenHence }
	have           { Token _ TokenHave }
	by             { Token _ TokenBy }
	equivalently   { Token _ TokenEquivalently }
	claim          { Token _ TokenClaim }
	case           { Token _ TokenCase }
	cases          { Token _ TokenCases }
	take           { Token _ TokenTake }
	':='           { Token _ TokenAssign }
	consider       { Token _ TokenConsider }
	st             { Token _ TokenSuchThat }
	let            { Token _ TokenLet }
	'`'            { Token _ TokenBacktick }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	%start_hParseProgram rule  1
	%start_hParseTerm rule  2
	Prog            rule  3
	Declarations    rules 4, 5
	Declaration     rules 6, 7
	Axiom           rule  8
	Theorem         rule  9
	Proof           rules 10, 11
	ProofStep       rules 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22
	Cases           rules 23, 24
	Case            rules 25, 26
	OptionalBy      rules 27, 28
	Justification   rules 29, 30
	Name            rules 31, 32
	Form            rules 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44
	Term            rules 45, 46, 47
	TermNoInfix     rules 48, 49
	TermArgs        rules 50, 51
	Terms           rules 52, 53

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Prog                              (rule 0)

	axiom          shift, and enter state 8
	theorem        shift, and enter state 9

	Prog           goto state 14
	Declarations   goto state 4
	Declaration    goto state 5
	Axiom          goto state 6
	Theorem        goto state 7

State 1

	%start_hParseProgram -> . Prog                      (rule 1)

	axiom          shift, and enter state 8
	theorem        shift, and enter state 9

	Prog           goto state 13
	Declarations   goto state 4
	Declaration    goto state 5
	Axiom          goto state 6
	Theorem        goto state 7

State 2

	%start_hParseTerm -> . Term                         (rule 2)

	id             shift, and enter state 11
	var            shift, and enter state 12

	Term           goto state 10

State 3

	Prog -> . Declarations                              (rule 3)

	axiom          shift, and enter state 8
	theorem        shift, and enter state 9

	Declarations   goto state 4
	Declaration    goto state 5
	Axiom          goto state 6
	Theorem        goto state 7

State 4

	Prog -> Declarations .                              (rule 3)

	%eof           reduce using rule 3


State 5

	Declarations -> Declaration . Declarations          (rule 4)
	Declarations -> Declaration .                       (rule 5)

	axiom          shift, and enter state 8
	theorem        shift, and enter state 9
	%eof           reduce using rule 5

	Declarations   goto state 22
	Declaration    goto state 5
	Axiom          goto state 6
	Theorem        goto state 7

State 6

	Declaration -> Axiom .                              (rule 6)

	axiom          reduce using rule 6
	theorem        reduce using rule 6
	%eof           reduce using rule 6


State 7

	Declaration -> Theorem .                            (rule 7)

	axiom          reduce using rule 7
	theorem        reduce using rule 7
	%eof           reduce using rule 7


State 8

	Axiom -> axiom . Name ':' Form                      (rule 8)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 21

State 9

	Theorem -> theorem . Name ':' Form proof Proof end    (rule 9)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 18

State 10

	%start_hParseTerm -> Term .                         (rule 2)
	Term -> Term . '`' id '`' TermNoInfix               (rule 47)

	'`'            shift, and enter state 17
	%eof           accept


State 11

	Term -> id . TermArgs                               (rule 46)

	'('            shift, and enter state 16
	')'            reduce using rule 50
	and            reduce using rule 50
	or             reduce using rule 50
	imp            reduce using rule 50
	iff            reduce using rule 50
	','            reduce using rule 50
	axiom          reduce using rule 50
	theorem        reduce using rule 50
	proof          reduce using rule 50
	end            reduce using rule 50
	suppose        reduce using rule 50
	thus           reduce using rule 50
	then           reduce using rule 50
	hence          reduce using rule 50
	have           reduce using rule 50
	by             reduce using rule 50
	equivalently   reduce using rule 50
	claim          reduce using rule 50
	case           reduce using rule 50
	cases          reduce using rule 50
	take           reduce using rule 50
	consider       reduce using rule 50
	let            reduce using rule 50
	'`'            reduce using rule 50
	%eof           reduce using rule 50

	TermArgs       goto state 15

State 12

	Term -> var .                                       (rule 45)

	')'            reduce using rule 45
	and            reduce using rule 45
	or             reduce using rule 45
	imp            reduce using rule 45
	iff            reduce using rule 45
	id             reduce using rule 45
	','            reduce using rule 45
	axiom          reduce using rule 45
	theorem        reduce using rule 45
	proof          reduce using rule 45
	end            reduce using rule 45
	suppose        reduce using rule 45
	thus           reduce using rule 45
	then           reduce using rule 45
	hence          reduce using rule 45
	have           reduce using rule 45
	by             reduce using rule 45
	equivalently   reduce using rule 45
	claim          reduce using rule 45
	case           reduce using rule 45
	cases          reduce using rule 45
	take           reduce using rule 45
	consider       reduce using rule 45
	let            reduce using rule 45
	'`'            reduce using rule 45
	%eof           reduce using rule 45


State 13

	%start_hParseProgram -> Prog .                      (rule 1)

	%eof           accept


State 14

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 15

	Term -> id TermArgs .                               (rule 46)

	')'            reduce using rule 46
	and            reduce using rule 46
	or             reduce using rule 46
	imp            reduce using rule 46
	iff            reduce using rule 46
	','            reduce using rule 46
	axiom          reduce using rule 46
	theorem        reduce using rule 46
	proof          reduce using rule 46
	end            reduce using rule 46
	suppose        reduce using rule 46
	thus           reduce using rule 46
	then           reduce using rule 46
	hence          reduce using rule 46
	have           reduce using rule 46
	by             reduce using rule 46
	equivalently   reduce using rule 46
	claim          reduce using rule 46
	case           reduce using rule 46
	cases          reduce using rule 46
	take           reduce using rule 46
	consider       reduce using rule 46
	let            reduce using rule 46
	'`'            reduce using rule 46
	%eof           reduce using rule 46


State 16

	TermArgs -> '(' . Terms ')'                         (rule 51)

	id             shift, and enter state 11
	var            shift, and enter state 12

	Term           goto state 26
	Terms          goto state 27

State 17

	Term -> Term '`' . id '`' TermNoInfix               (rule 47)

	id             shift, and enter state 25


State 18

	Theorem -> theorem Name . ':' Form proof Proof end    (rule 9)

	':'            shift, and enter state 24


State 19

	Name -> id .                                        (rule 31)

	':'            reduce using rule 31
	','            reduce using rule 31
	end            reduce using rule 31
	suppose        reduce using rule 31
	thus           reduce using rule 31
	then           reduce using rule 31
	hence          reduce using rule 31
	have           reduce using rule 31
	equivalently   reduce using rule 31
	claim          reduce using rule 31
	case           reduce using rule 31
	cases          reduce using rule 31
	take           reduce using rule 31
	consider       reduce using rule 31
	let            reduce using rule 31


State 20

	Name -> name .                                      (rule 32)

	':'            reduce using rule 32
	','            reduce using rule 32
	end            reduce using rule 32
	suppose        reduce using rule 32
	thus           reduce using rule 32
	then           reduce using rule 32
	hence          reduce using rule 32
	have           reduce using rule 32
	equivalently   reduce using rule 32
	claim          reduce using rule 32
	case           reduce using rule 32
	cases          reduce using rule 32
	take           reduce using rule 32
	consider       reduce using rule 32
	let            reduce using rule 32


State 21

	Axiom -> axiom Name . ':' Form                      (rule 8)

	':'            shift, and enter state 23


State 22

	Declarations -> Declaration Declarations .          (rule 4)

	%eof           reduce using rule 4


State 23

	Axiom -> axiom Name ':' . Form                      (rule 8)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 40
	Term           goto state 32

State 24

	Theorem -> theorem Name ':' . Form proof Proof end    (rule 9)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 31
	Term           goto state 32

State 25

	Term -> Term '`' id . '`' TermNoInfix               (rule 47)

	'`'            shift, and enter state 30


State 26

	Term -> Term . '`' id '`' TermNoInfix               (rule 47)
	Terms -> Term .                                     (rule 52)
	Terms -> Term . ',' Terms                           (rule 53)

	')'            reduce using rule 52
	','            shift, and enter state 29
	'`'            shift, and enter state 17


State 27

	TermArgs -> '(' Terms . ')'                         (rule 51)

	')'            shift, and enter state 28


State 28

	TermArgs -> '(' Terms ')' .                         (rule 51)

	')'            reduce using rule 51
	and            reduce using rule 51
	or             reduce using rule 51
	imp            reduce using rule 51
	iff            reduce using rule 51
	id             reduce using rule 51
	','            reduce using rule 51
	axiom          reduce using rule 51
	theorem        reduce using rule 51
	proof          reduce using rule 51
	end            reduce using rule 51
	suppose        reduce using rule 51
	thus           reduce using rule 51
	then           reduce using rule 51
	hence          reduce using rule 51
	have           reduce using rule 51
	by             reduce using rule 51
	equivalently   reduce using rule 51
	claim          reduce using rule 51
	case           reduce using rule 51
	cases          reduce using rule 51
	take           reduce using rule 51
	consider       reduce using rule 51
	let            reduce using rule 51
	'`'            reduce using rule 51
	%eof           reduce using rule 51


State 29

	Terms -> Term ',' . Terms                           (rule 53)

	id             shift, and enter state 11
	var            shift, and enter state 12

	Term           goto state 26
	Terms          goto state 55

State 30

	Term -> Term '`' id '`' . TermNoInfix               (rule 47)

	id             shift, and enter state 53
	var            shift, and enter state 54

	TermNoInfix    goto state 52

State 31

	Theorem -> theorem Name ':' Form . proof Proof end    (rule 9)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	proof          shift, and enter state 51


State 32

	Form -> Term . id Term                              (rule 34)
	Term -> Term . '`' id '`' TermNoInfix               (rule 47)

	id             shift, and enter state 50
	'`'            shift, and enter state 17


State 33

	Form -> '(' . Form ')'                              (rule 44)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 49
	Term           goto state 32

State 34

	Form -> not . Form                                  (rule 39)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 48
	Term           goto state 32

State 35

	Form -> true .                                      (rule 42)

	')'            reduce using rule 42
	and            reduce using rule 42
	or             reduce using rule 42
	imp            reduce using rule 42
	iff            reduce using rule 42
	axiom          reduce using rule 42
	theorem        reduce using rule 42
	proof          reduce using rule 42
	end            reduce using rule 42
	suppose        reduce using rule 42
	thus           reduce using rule 42
	then           reduce using rule 42
	hence          reduce using rule 42
	have           reduce using rule 42
	by             reduce using rule 42
	equivalently   reduce using rule 42
	claim          reduce using rule 42
	case           reduce using rule 42
	cases          reduce using rule 42
	take           reduce using rule 42
	consider       reduce using rule 42
	let            reduce using rule 42
	%eof           reduce using rule 42


State 36

	Form -> false .                                     (rule 43)

	')'            reduce using rule 43
	and            reduce using rule 43
	or             reduce using rule 43
	imp            reduce using rule 43
	iff            reduce using rule 43
	axiom          reduce using rule 43
	theorem        reduce using rule 43
	proof          reduce using rule 43
	end            reduce using rule 43
	suppose        reduce using rule 43
	thus           reduce using rule 43
	then           reduce using rule 43
	hence          reduce using rule 43
	have           reduce using rule 43
	by             reduce using rule 43
	equivalently   reduce using rule 43
	claim          reduce using rule 43
	case           reduce using rule 43
	cases          reduce using rule 43
	take           reduce using rule 43
	consider       reduce using rule 43
	let            reduce using rule 43
	%eof           reduce using rule 43


State 37

	Form -> forall . var dot Form                       (rule 41)

	var            shift, and enter state 47


State 38

	Form -> exists . var dot Form                       (rule 40)

	var            shift, and enter state 46


State 39

	Form -> id . TermArgs                               (rule 33)
	Term -> id . TermArgs                               (rule 46)

	'('            shift, and enter state 16
	')'            reduce using rule 50
	and            reduce using rule 50
	or             reduce using rule 50
	imp            reduce using rule 50
	iff            reduce using rule 50
	id             reduce using rule 50
	axiom          reduce using rule 50
	theorem        reduce using rule 50
	proof          reduce using rule 50
	end            reduce using rule 50
	suppose        reduce using rule 50
	thus           reduce using rule 50
	then           reduce using rule 50
	hence          reduce using rule 50
	have           reduce using rule 50
	by             reduce using rule 50
	equivalently   reduce using rule 50
	claim          reduce using rule 50
	case           reduce using rule 50
	cases          reduce using rule 50
	take           reduce using rule 50
	consider       reduce using rule 50
	let            reduce using rule 50
	'`'            reduce using rule 50
	%eof           reduce using rule 50

	TermArgs       goto state 45

State 40

	Axiom -> axiom Name ':' Form .                      (rule 8)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	axiom          reduce using rule 8
	theorem        reduce using rule 8
	%eof           reduce using rule 8


State 41

	Form -> Form and . Form                             (rule 35)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 77
	Term           goto state 32

State 42

	Form -> Form or . Form                              (rule 36)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 76
	Term           goto state 32

State 43

	Form -> Form imp . Form                             (rule 37)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 75
	Term           goto state 32

State 44

	Form -> Form iff . Form                             (rule 38)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 74
	Term           goto state 32

State 45

	Form -> id TermArgs .                               (rule 33)
	Term -> id TermArgs .                               (rule 46)

	')'            reduce using rule 33
	and            reduce using rule 33
	or             reduce using rule 33
	imp            reduce using rule 33
	iff            reduce using rule 33
	id             reduce using rule 46
	axiom          reduce using rule 33
	theorem        reduce using rule 33
	proof          reduce using rule 33
	end            reduce using rule 33
	suppose        reduce using rule 33
	thus           reduce using rule 33
	then           reduce using rule 33
	hence          reduce using rule 33
	have           reduce using rule 33
	by             reduce using rule 33
	equivalently   reduce using rule 33
	claim          reduce using rule 33
	case           reduce using rule 33
	cases          reduce using rule 33
	take           reduce using rule 33
	consider       reduce using rule 33
	let            reduce using rule 33
	'`'            reduce using rule 46
	%eof           reduce using rule 33


State 46

	Form -> exists var . dot Form                       (rule 40)

	dot            shift, and enter state 73


State 47

	Form -> forall var . dot Form                       (rule 41)

	dot            shift, and enter state 72


State 48

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)
	Form -> not Form .                                  (rule 39)

	')'            reduce using rule 39
	and            reduce using rule 39
	or             reduce using rule 39
	imp            reduce using rule 39
	iff            reduce using rule 39
	axiom          reduce using rule 39
	theorem        reduce using rule 39
	proof          reduce using rule 39
	end            reduce using rule 39
	suppose        reduce using rule 39
	thus           reduce using rule 39
	then           reduce using rule 39
	hence          reduce using rule 39
	have           reduce using rule 39
	by             reduce using rule 39
	equivalently   reduce using rule 39
	claim          reduce using rule 39
	case           reduce using rule 39
	cases          reduce using rule 39
	take           reduce using rule 39
	consider       reduce using rule 39
	let            reduce using rule 39
	%eof           reduce using rule 39


State 49

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)
	Form -> '(' Form . ')'                              (rule 44)

	')'            shift, and enter state 71
	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44


State 50

	Form -> Term id . Term                              (rule 34)

	id             shift, and enter state 11
	var            shift, and enter state 12

	Term           goto state 70

State 51

	Theorem -> theorem Name ':' Form proof . Proof end    (rule 9)

	end            reduce using rule 11
	suppose        shift, and enter state 59
	thus           shift, and enter state 60
	then           shift, and enter state 61
	hence          shift, and enter state 62
	have           shift, and enter state 63
	equivalently   shift, and enter state 64
	claim          shift, and enter state 65
	cases          shift, and enter state 66
	take           shift, and enter state 67
	consider       shift, and enter state 68
	let            shift, and enter state 69

	Proof          goto state 57
	ProofStep      goto state 58

State 52

	Term -> Term '`' id '`' TermNoInfix .               (rule 47)

	')'            reduce using rule 47
	and            reduce using rule 47
	or             reduce using rule 47
	imp            reduce using rule 47
	iff            reduce using rule 47
	id             reduce using rule 47
	','            reduce using rule 47
	axiom          reduce using rule 47
	theorem        reduce using rule 47
	proof          reduce using rule 47
	end            reduce using rule 47
	suppose        reduce using rule 47
	thus           reduce using rule 47
	then           reduce using rule 47
	hence          reduce using rule 47
	have           reduce using rule 47
	by             reduce using rule 47
	equivalently   reduce using rule 47
	claim          reduce using rule 47
	case           reduce using rule 47
	cases          reduce using rule 47
	take           reduce using rule 47
	consider       reduce using rule 47
	let            reduce using rule 47
	'`'            reduce using rule 47
	%eof           reduce using rule 47


State 53

	TermNoInfix -> id . TermArgs                        (rule 49)

	'('            shift, and enter state 16
	')'            reduce using rule 50
	and            reduce using rule 50
	or             reduce using rule 50
	imp            reduce using rule 50
	iff            reduce using rule 50
	id             reduce using rule 50
	','            reduce using rule 50
	axiom          reduce using rule 50
	theorem        reduce using rule 50
	proof          reduce using rule 50
	end            reduce using rule 50
	suppose        reduce using rule 50
	thus           reduce using rule 50
	then           reduce using rule 50
	hence          reduce using rule 50
	have           reduce using rule 50
	by             reduce using rule 50
	equivalently   reduce using rule 50
	claim          reduce using rule 50
	case           reduce using rule 50
	cases          reduce using rule 50
	take           reduce using rule 50
	consider       reduce using rule 50
	let            reduce using rule 50
	'`'            reduce using rule 50
	%eof           reduce using rule 50

	TermArgs       goto state 56

State 54

	TermNoInfix -> var .                                (rule 48)

	')'            reduce using rule 48
	and            reduce using rule 48
	or             reduce using rule 48
	imp            reduce using rule 48
	iff            reduce using rule 48
	id             reduce using rule 48
	','            reduce using rule 48
	axiom          reduce using rule 48
	theorem        reduce using rule 48
	proof          reduce using rule 48
	end            reduce using rule 48
	suppose        reduce using rule 48
	thus           reduce using rule 48
	then           reduce using rule 48
	hence          reduce using rule 48
	have           reduce using rule 48
	by             reduce using rule 48
	equivalently   reduce using rule 48
	claim          reduce using rule 48
	case           reduce using rule 48
	cases          reduce using rule 48
	take           reduce using rule 48
	consider       reduce using rule 48
	let            reduce using rule 48
	'`'            reduce using rule 48
	%eof           reduce using rule 48


State 55

	Terms -> Term ',' Terms .                           (rule 53)

	')'            reduce using rule 53


State 56

	TermNoInfix -> id TermArgs .                        (rule 49)

	')'            reduce using rule 49
	and            reduce using rule 49
	or             reduce using rule 49
	imp            reduce using rule 49
	iff            reduce using rule 49
	id             reduce using rule 49
	','            reduce using rule 49
	axiom          reduce using rule 49
	theorem        reduce using rule 49
	proof          reduce using rule 49
	end            reduce using rule 49
	suppose        reduce using rule 49
	thus           reduce using rule 49
	then           reduce using rule 49
	hence          reduce using rule 49
	have           reduce using rule 49
	by             reduce using rule 49
	equivalently   reduce using rule 49
	claim          reduce using rule 49
	case           reduce using rule 49
	cases          reduce using rule 49
	take           reduce using rule 49
	consider       reduce using rule 49
	let            reduce using rule 49
	'`'            reduce using rule 49
	%eof           reduce using rule 49


State 57

	Theorem -> theorem Name ':' Form proof Proof . end    (rule 9)

	end            shift, and enter state 93


State 58

	Proof -> ProofStep . Proof                          (rule 10)

	end            reduce using rule 11
	suppose        shift, and enter state 59
	thus           shift, and enter state 60
	then           shift, and enter state 61
	hence          shift, and enter state 62
	have           shift, and enter state 63
	equivalently   shift, and enter state 64
	claim          shift, and enter state 65
	case           reduce using rule 11
	cases          shift, and enter state 66
	take           shift, and enter state 67
	consider       shift, and enter state 68
	let            shift, and enter state 69

	Proof          goto state 92
	ProofStep      goto state 58

State 59

	ProofStep -> suppose . Name ':' Form                (rule 12)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 91

State 60

	ProofStep -> thus . Form OptionalBy                 (rule 13)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 90
	Term           goto state 32

State 61

	ProofStep -> then . Name ':' Form OptionalBy        (rule 16)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 89

State 62

	ProofStep -> hence . Form OptionalBy                (rule 14)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 88
	Term           goto state 32

State 63

	ProofStep -> have . Name ':' Form OptionalBy        (rule 15)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 87

State 64

	ProofStep -> equivalently . Form                    (rule 17)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 86
	Term           goto state 32

State 65

	ProofStep -> claim . Name ':' Form proof Proof end    (rule 18)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 85

State 66

	ProofStep -> cases . OptionalBy Cases end           (rule 19)

	end            reduce using rule 28
	by             shift, and enter state 84
	case           reduce using rule 28

	OptionalBy     goto state 83

State 67

	ProofStep -> take . var ':=' Term                   (rule 20)

	var            shift, and enter state 82


State 68

	ProofStep -> consider . var st Name ':' Form by Justification    (rule 22)

	var            shift, and enter state 81


State 69

	ProofStep -> let . var                              (rule 21)

	var            shift, and enter state 80


State 70

	Form -> Term id Term .                              (rule 34)
	Term -> Term . '`' id '`' TermNoInfix               (rule 47)

	')'            reduce using rule 34
	and            reduce using rule 34
	or             reduce using rule 34
	imp            reduce using rule 34
	iff            reduce using rule 34
	axiom          reduce using rule 34
	theorem        reduce using rule 34
	proof          reduce using rule 34
	end            reduce using rule 34
	suppose        reduce using rule 34
	thus           reduce using rule 34
	then           reduce using rule 34
	hence          reduce using rule 34
	have           reduce using rule 34
	by             reduce using rule 34
	equivalently   reduce using rule 34
	claim          reduce using rule 34
	case           reduce using rule 34
	cases          reduce using rule 34
	take           reduce using rule 34
	consider       reduce using rule 34
	let            reduce using rule 34
	'`'            shift, and enter state 17
	%eof           reduce using rule 34


State 71

	Form -> '(' Form ')' .                              (rule 44)

	')'            reduce using rule 44
	and            reduce using rule 44
	or             reduce using rule 44
	imp            reduce using rule 44
	iff            reduce using rule 44
	axiom          reduce using rule 44
	theorem        reduce using rule 44
	proof          reduce using rule 44
	end            reduce using rule 44
	suppose        reduce using rule 44
	thus           reduce using rule 44
	then           reduce using rule 44
	hence          reduce using rule 44
	have           reduce using rule 44
	by             reduce using rule 44
	equivalently   reduce using rule 44
	claim          reduce using rule 44
	case           reduce using rule 44
	cases          reduce using rule 44
	take           reduce using rule 44
	consider       reduce using rule 44
	let            reduce using rule 44
	%eof           reduce using rule 44


State 72

	Form -> forall var dot . Form                       (rule 41)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 79
	Term           goto state 32

State 73

	Form -> exists var dot . Form                       (rule 40)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 78
	Term           goto state 32

State 74

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)
	Form -> Form iff Form .                             (rule 38)

	')'            reduce using rule 38
	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	axiom          reduce using rule 38
	theorem        reduce using rule 38
	proof          reduce using rule 38
	end            reduce using rule 38
	suppose        reduce using rule 38
	thus           reduce using rule 38
	then           reduce using rule 38
	hence          reduce using rule 38
	have           reduce using rule 38
	by             reduce using rule 38
	equivalently   reduce using rule 38
	claim          reduce using rule 38
	case           reduce using rule 38
	cases          reduce using rule 38
	take           reduce using rule 38
	consider       reduce using rule 38
	let            reduce using rule 38
	%eof           reduce using rule 38


State 75

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form imp Form .                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	')'            reduce using rule 37
	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	axiom          reduce using rule 37
	theorem        reduce using rule 37
	proof          reduce using rule 37
	end            reduce using rule 37
	suppose        reduce using rule 37
	thus           reduce using rule 37
	then           reduce using rule 37
	hence          reduce using rule 37
	have           reduce using rule 37
	by             reduce using rule 37
	equivalently   reduce using rule 37
	claim          reduce using rule 37
	case           reduce using rule 37
	cases          reduce using rule 37
	take           reduce using rule 37
	consider       reduce using rule 37
	let            reduce using rule 37
	%eof           reduce using rule 37


State 76

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form or Form .                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	')'            reduce using rule 36
	and            reduce using rule 36
	or             reduce using rule 36
	imp            reduce using rule 36
	iff            reduce using rule 36
	axiom          reduce using rule 36
	theorem        reduce using rule 36
	proof          reduce using rule 36
	end            reduce using rule 36
	suppose        reduce using rule 36
	thus           reduce using rule 36
	then           reduce using rule 36
	hence          reduce using rule 36
	have           reduce using rule 36
	by             reduce using rule 36
	equivalently   reduce using rule 36
	claim          reduce using rule 36
	case           reduce using rule 36
	cases          reduce using rule 36
	take           reduce using rule 36
	consider       reduce using rule 36
	let            reduce using rule 36
	%eof           reduce using rule 36


State 77

	Form -> Form . and Form                             (rule 35)
	Form -> Form and Form .                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	')'            reduce using rule 35
	and            reduce using rule 35
	or             reduce using rule 35
	imp            reduce using rule 35
	iff            reduce using rule 35
	axiom          reduce using rule 35
	theorem        reduce using rule 35
	proof          reduce using rule 35
	end            reduce using rule 35
	suppose        reduce using rule 35
	thus           reduce using rule 35
	then           reduce using rule 35
	hence          reduce using rule 35
	have           reduce using rule 35
	by             reduce using rule 35
	equivalently   reduce using rule 35
	claim          reduce using rule 35
	case           reduce using rule 35
	cases          reduce using rule 35
	take           reduce using rule 35
	consider       reduce using rule 35
	let            reduce using rule 35
	%eof           reduce using rule 35


State 78

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)
	Form -> exists var dot Form .                       (rule 40)

	')'            reduce using rule 40
	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	axiom          reduce using rule 40
	theorem        reduce using rule 40
	proof          reduce using rule 40
	end            reduce using rule 40
	suppose        reduce using rule 40
	thus           reduce using rule 40
	then           reduce using rule 40
	hence          reduce using rule 40
	have           reduce using rule 40
	by             reduce using rule 40
	equivalently   reduce using rule 40
	claim          reduce using rule 40
	case           reduce using rule 40
	cases          reduce using rule 40
	take           reduce using rule 40
	consider       reduce using rule 40
	let            reduce using rule 40
	%eof           reduce using rule 40


State 79

	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)
	Form -> forall var dot Form .                       (rule 41)

	')'            reduce using rule 41
	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	axiom          reduce using rule 41
	theorem        reduce using rule 41
	proof          reduce using rule 41
	end            reduce using rule 41
	suppose        reduce using rule 41
	thus           reduce using rule 41
	then           reduce using rule 41
	hence          reduce using rule 41
	have           reduce using rule 41
	by             reduce using rule 41
	equivalently   reduce using rule 41
	claim          reduce using rule 41
	case           reduce using rule 41
	cases          reduce using rule 41
	take           reduce using rule 41
	consider       reduce using rule 41
	let            reduce using rule 41
	%eof           reduce using rule 41


State 80

	ProofStep -> let var .                              (rule 21)

	end            reduce using rule 21
	suppose        reduce using rule 21
	thus           reduce using rule 21
	then           reduce using rule 21
	hence          reduce using rule 21
	have           reduce using rule 21
	equivalently   reduce using rule 21
	claim          reduce using rule 21
	case           reduce using rule 21
	cases          reduce using rule 21
	take           reduce using rule 21
	consider       reduce using rule 21
	let            reduce using rule 21


State 81

	ProofStep -> consider var . st Name ':' Form by Justification    (rule 22)

	st             shift, and enter state 106


State 82

	ProofStep -> take var . ':=' Term                   (rule 20)

	':='           shift, and enter state 105


State 83

	ProofStep -> cases OptionalBy . Cases end           (rule 19)

	end            reduce using rule 24
	case           shift, and enter state 104

	Cases          goto state 102
	Case           goto state 103

State 84

	OptionalBy -> by . Justification                    (rule 27)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Justification  goto state 100
	Name           goto state 101

State 85

	ProofStep -> claim Name . ':' Form proof Proof end    (rule 18)

	':'            shift, and enter state 99


State 86

	ProofStep -> equivalently Form .                    (rule 17)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 17
	suppose        reduce using rule 17
	thus           reduce using rule 17
	then           reduce using rule 17
	hence          reduce using rule 17
	have           reduce using rule 17
	equivalently   reduce using rule 17
	claim          reduce using rule 17
	case           reduce using rule 17
	cases          reduce using rule 17
	take           reduce using rule 17
	consider       reduce using rule 17
	let            reduce using rule 17


State 87

	ProofStep -> have Name . ':' Form OptionalBy        (rule 15)

	':'            shift, and enter state 98


State 88

	ProofStep -> hence Form . OptionalBy                (rule 14)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 28
	suppose        reduce using rule 28
	thus           reduce using rule 28
	then           reduce using rule 28
	hence          reduce using rule 28
	have           reduce using rule 28
	by             shift, and enter state 84
	equivalently   reduce using rule 28
	claim          reduce using rule 28
	case           reduce using rule 28
	cases          reduce using rule 28
	take           reduce using rule 28
	consider       reduce using rule 28
	let            reduce using rule 28

	OptionalBy     goto state 97

State 89

	ProofStep -> then Name . ':' Form OptionalBy        (rule 16)

	':'            shift, and enter state 96


State 90

	ProofStep -> thus Form . OptionalBy                 (rule 13)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 28
	suppose        reduce using rule 28
	thus           reduce using rule 28
	then           reduce using rule 28
	hence          reduce using rule 28
	have           reduce using rule 28
	by             shift, and enter state 84
	equivalently   reduce using rule 28
	claim          reduce using rule 28
	case           reduce using rule 28
	cases          reduce using rule 28
	take           reduce using rule 28
	consider       reduce using rule 28
	let            reduce using rule 28

	OptionalBy     goto state 95

State 91

	ProofStep -> suppose Name . ':' Form                (rule 12)

	':'            shift, and enter state 94


State 92

	Proof -> ProofStep Proof .                          (rule 10)

	end            reduce using rule 10
	case           reduce using rule 10


State 93

	Theorem -> theorem Name ':' Form proof Proof end .    (rule 9)

	axiom          reduce using rule 9
	theorem        reduce using rule 9
	%eof           reduce using rule 9


State 94

	ProofStep -> suppose Name ':' . Form                (rule 12)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 118
	Term           goto state 32

State 95

	ProofStep -> thus Form OptionalBy .                 (rule 13)

	end            reduce using rule 13
	suppose        reduce using rule 13
	thus           reduce using rule 13
	then           reduce using rule 13
	hence          reduce using rule 13
	have           reduce using rule 13
	equivalently   reduce using rule 13
	claim          reduce using rule 13
	case           reduce using rule 13
	cases          reduce using rule 13
	take           reduce using rule 13
	consider       reduce using rule 13
	let            reduce using rule 13


State 96

	ProofStep -> then Name ':' . Form OptionalBy        (rule 16)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 117
	Term           goto state 32

State 97

	ProofStep -> hence Form OptionalBy .                (rule 14)

	end            reduce using rule 14
	suppose        reduce using rule 14
	thus           reduce using rule 14
	then           reduce using rule 14
	hence          reduce using rule 14
	have           reduce using rule 14
	equivalently   reduce using rule 14
	claim          reduce using rule 14
	case           reduce using rule 14
	cases          reduce using rule 14
	take           reduce using rule 14
	consider       reduce using rule 14
	let            reduce using rule 14


State 98

	ProofStep -> have Name ':' . Form OptionalBy        (rule 15)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 116
	Term           goto state 32

State 99

	ProofStep -> claim Name ':' . Form proof Proof end    (rule 18)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 115
	Term           goto state 32

State 100

	OptionalBy -> by Justification .                    (rule 27)

	end            reduce using rule 27
	suppose        reduce using rule 27
	thus           reduce using rule 27
	then           reduce using rule 27
	hence          reduce using rule 27
	have           reduce using rule 27
	equivalently   reduce using rule 27
	claim          reduce using rule 27
	case           reduce using rule 27
	cases          reduce using rule 27
	take           reduce using rule 27
	consider       reduce using rule 27
	let            reduce using rule 27


State 101

	Justification -> Name . ',' Justification           (rule 29)
	Justification -> Name .                             (rule 30)

	','            shift, and enter state 114
	end            reduce using rule 30
	suppose        reduce using rule 30
	thus           reduce using rule 30
	then           reduce using rule 30
	hence          reduce using rule 30
	have           reduce using rule 30
	equivalently   reduce using rule 30
	claim          reduce using rule 30
	case           reduce using rule 30
	cases          reduce using rule 30
	take           reduce using rule 30
	consider       reduce using rule 30
	let            reduce using rule 30


State 102

	ProofStep -> cases OptionalBy Cases . end           (rule 19)

	end            shift, and enter state 113


State 103

	Cases -> Case . Cases                               (rule 23)

	end            reduce using rule 24
	case           shift, and enter state 104

	Cases          goto state 112
	Case           goto state 103

State 104

	Case -> case . Form Proof                           (rule 25)
	Case -> case . Name ':' Form Proof                  (rule 26)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 111
	var            shift, and enter state 12
	name           shift, and enter state 20

	Name           goto state 109
	Form           goto state 110
	Term           goto state 32

State 105

	ProofStep -> take var ':=' . Term                   (rule 20)

	id             shift, and enter state 11
	var            shift, and enter state 12

	Term           goto state 108

State 106

	ProofStep -> consider var st . Name ':' Form by Justification    (rule 22)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Name           goto state 107

State 107

	ProofStep -> consider var st Name . ':' Form by Justification    (rule 22)

	':'            shift, and enter state 125


State 108

	ProofStep -> take var ':=' Term .                   (rule 20)
	Term -> Term . '`' id '`' TermNoInfix               (rule 47)

	end            reduce using rule 20
	suppose        reduce using rule 20
	thus           reduce using rule 20
	then           reduce using rule 20
	hence          reduce using rule 20
	have           reduce using rule 20
	equivalently   reduce using rule 20
	claim          reduce using rule 20
	case           reduce using rule 20
	cases          reduce using rule 20
	take           reduce using rule 20
	consider       reduce using rule 20
	let            reduce using rule 20
	'`'            shift, and enter state 17


State 109

	Case -> case Name . ':' Form Proof                  (rule 26)

	':'            shift, and enter state 124


State 110

	Case -> case Form . Proof                           (rule 25)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 11
	suppose        shift, and enter state 59
	thus           shift, and enter state 60
	then           shift, and enter state 61
	hence          shift, and enter state 62
	have           shift, and enter state 63
	equivalently   shift, and enter state 64
	claim          shift, and enter state 65
	case           reduce using rule 11
	cases          shift, and enter state 66
	take           shift, and enter state 67
	consider       shift, and enter state 68
	let            shift, and enter state 69

	Proof          goto state 123
	ProofStep      goto state 58

State 111

	Name -> id .                                        (rule 31)
	Form -> id . TermArgs                               (rule 33)
	Term -> id . TermArgs                               (rule 46)

	'('            shift, and enter state 16
	and            reduce using rule 50
	or             reduce using rule 50
	imp            reduce using rule 50
	iff            reduce using rule 50
	id             reduce using rule 50
	':'            reduce using rule 31
	end            reduce using rule 50
	suppose        reduce using rule 50
	thus           reduce using rule 50
	then           reduce using rule 50
	hence          reduce using rule 50
	have           reduce using rule 50
	equivalently   reduce using rule 50
	claim          reduce using rule 50
	case           reduce using rule 50
	cases          reduce using rule 50
	take           reduce using rule 50
	consider       reduce using rule 50
	let            reduce using rule 50
	'`'            reduce using rule 50

	TermArgs       goto state 45

State 112

	Cases -> Case Cases .                               (rule 23)

	end            reduce using rule 23


State 113

	ProofStep -> cases OptionalBy Cases end .           (rule 19)

	end            reduce using rule 19
	suppose        reduce using rule 19
	thus           reduce using rule 19
	then           reduce using rule 19
	hence          reduce using rule 19
	have           reduce using rule 19
	equivalently   reduce using rule 19
	claim          reduce using rule 19
	case           reduce using rule 19
	cases          reduce using rule 19
	take           reduce using rule 19
	consider       reduce using rule 19
	let            reduce using rule 19


State 114

	Justification -> Name ',' . Justification           (rule 29)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Justification  goto state 122
	Name           goto state 101

State 115

	ProofStep -> claim Name ':' Form . proof Proof end    (rule 18)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	proof          shift, and enter state 121


State 116

	ProofStep -> have Name ':' Form . OptionalBy        (rule 15)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 28
	suppose        reduce using rule 28
	thus           reduce using rule 28
	then           reduce using rule 28
	hence          reduce using rule 28
	have           reduce using rule 28
	by             shift, and enter state 84
	equivalently   reduce using rule 28
	claim          reduce using rule 28
	case           reduce using rule 28
	cases          reduce using rule 28
	take           reduce using rule 28
	consider       reduce using rule 28
	let            reduce using rule 28

	OptionalBy     goto state 120

State 117

	ProofStep -> then Name ':' Form . OptionalBy        (rule 16)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 28
	suppose        reduce using rule 28
	thus           reduce using rule 28
	then           reduce using rule 28
	hence          reduce using rule 28
	have           reduce using rule 28
	by             shift, and enter state 84
	equivalently   reduce using rule 28
	claim          reduce using rule 28
	case           reduce using rule 28
	cases          reduce using rule 28
	take           reduce using rule 28
	consider       reduce using rule 28
	let            reduce using rule 28

	OptionalBy     goto state 119

State 118

	ProofStep -> suppose Name ':' Form .                (rule 12)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 12
	suppose        reduce using rule 12
	thus           reduce using rule 12
	then           reduce using rule 12
	hence          reduce using rule 12
	have           reduce using rule 12
	equivalently   reduce using rule 12
	claim          reduce using rule 12
	case           reduce using rule 12
	cases          reduce using rule 12
	take           reduce using rule 12
	consider       reduce using rule 12
	let            reduce using rule 12


State 119

	ProofStep -> then Name ':' Form OptionalBy .        (rule 16)

	end            reduce using rule 16
	suppose        reduce using rule 16
	thus           reduce using rule 16
	then           reduce using rule 16
	hence          reduce using rule 16
	have           reduce using rule 16
	equivalently   reduce using rule 16
	claim          reduce using rule 16
	case           reduce using rule 16
	cases          reduce using rule 16
	take           reduce using rule 16
	consider       reduce using rule 16
	let            reduce using rule 16


State 120

	ProofStep -> have Name ':' Form OptionalBy .        (rule 15)

	end            reduce using rule 15
	suppose        reduce using rule 15
	thus           reduce using rule 15
	then           reduce using rule 15
	hence          reduce using rule 15
	have           reduce using rule 15
	equivalently   reduce using rule 15
	claim          reduce using rule 15
	case           reduce using rule 15
	cases          reduce using rule 15
	take           reduce using rule 15
	consider       reduce using rule 15
	let            reduce using rule 15


State 121

	ProofStep -> claim Name ':' Form proof . Proof end    (rule 18)

	end            reduce using rule 11
	suppose        shift, and enter state 59
	thus           shift, and enter state 60
	then           shift, and enter state 61
	hence          shift, and enter state 62
	have           shift, and enter state 63
	equivalently   shift, and enter state 64
	claim          shift, and enter state 65
	cases          shift, and enter state 66
	take           shift, and enter state 67
	consider       shift, and enter state 68
	let            shift, and enter state 69

	Proof          goto state 128
	ProofStep      goto state 58

State 122

	Justification -> Name ',' Justification .           (rule 29)

	end            reduce using rule 29
	suppose        reduce using rule 29
	thus           reduce using rule 29
	then           reduce using rule 29
	hence          reduce using rule 29
	have           reduce using rule 29
	equivalently   reduce using rule 29
	claim          reduce using rule 29
	case           reduce using rule 29
	cases          reduce using rule 29
	take           reduce using rule 29
	consider       reduce using rule 29
	let            reduce using rule 29


State 123

	Case -> case Form Proof .                           (rule 25)

	end            reduce using rule 25
	case           reduce using rule 25


State 124

	Case -> case Name ':' . Form Proof                  (rule 26)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 127
	Term           goto state 32

State 125

	ProofStep -> consider var st Name ':' . Form by Justification    (rule 22)

	'('            shift, and enter state 33
	not            shift, and enter state 34
	true           shift, and enter state 35
	false          shift, and enter state 36
	forall         shift, and enter state 37
	exists         shift, and enter state 38
	id             shift, and enter state 39
	var            shift, and enter state 12

	Form           goto state 126
	Term           goto state 32

State 126

	ProofStep -> consider var st Name ':' Form . by Justification    (rule 22)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	by             shift, and enter state 131


State 127

	Case -> case Name ':' Form . Proof                  (rule 26)
	Form -> Form . and Form                             (rule 35)
	Form -> Form . or Form                              (rule 36)
	Form -> Form . imp Form                             (rule 37)
	Form -> Form . iff Form                             (rule 38)

	and            shift, and enter state 41
	or             shift, and enter state 42
	imp            shift, and enter state 43
	iff            shift, and enter state 44
	end            reduce using rule 11
	suppose        shift, and enter state 59
	thus           shift, and enter state 60
	then           shift, and enter state 61
	hence          shift, and enter state 62
	have           shift, and enter state 63
	equivalently   shift, and enter state 64
	claim          shift, and enter state 65
	case           reduce using rule 11
	cases          shift, and enter state 66
	take           shift, and enter state 67
	consider       shift, and enter state 68
	let            shift, and enter state 69

	Proof          goto state 130
	ProofStep      goto state 58

State 128

	ProofStep -> claim Name ':' Form proof Proof . end    (rule 18)

	end            shift, and enter state 129


State 129

	ProofStep -> claim Name ':' Form proof Proof end .    (rule 18)

	end            reduce using rule 18
	suppose        reduce using rule 18
	thus           reduce using rule 18
	then           reduce using rule 18
	hence          reduce using rule 18
	have           reduce using rule 18
	equivalently   reduce using rule 18
	claim          reduce using rule 18
	case           reduce using rule 18
	cases          reduce using rule 18
	take           reduce using rule 18
	consider       reduce using rule 18
	let            reduce using rule 18


State 130

	Case -> case Name ':' Form Proof .                  (rule 26)

	end            reduce using rule 26
	case           reduce using rule 26


State 131

	ProofStep -> consider var st Name ':' Form by . Justification    (rule 22)

	id             shift, and enter state 19
	name           shift, and enter state 20

	Justification  goto state 132
	Name           goto state 101

State 132

	ProofStep -> consider var st Name ':' Form by Justification .    (rule 22)

	end            reduce using rule 22
	suppose        reduce using rule 22
	thus           reduce using rule 22
	then           reduce using rule 22
	hence          reduce using rule 22
	have           reduce using rule 22
	equivalently   reduce using rule 22
	claim          reduce using rule 22
	case           reduce using rule 22
	cases          reduce using rule 22
	take           reduce using rule 22
	consider       reduce using rule 22
	let            reduce using rule 22


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 54
Number of terminals: 37
Number of non-terminals: 20
Number of states: 133
