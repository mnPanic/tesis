-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Parser.y
-----------------------------------------------------------------------------

state 37 contains 1 reduce/reduce conflicts.
state 68 contains 1 reduce/reduce conflicts.

rule 9 is unused
rule 11 is unused
rule 24 is unused
rule 25 is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	Prog -> Declarations                               (1)
	Declarations -> Declaration Declarations           (2)
	Declarations -> Declaration                        (3)
	Declaration -> Axiom                               (4)
	Declaration -> Theorem                             (5)
	Axiom -> axiom Name ':' Form                       (6)
	Theorem -> theorem Name ':' Form proof Proof end   (7)
	Proof -> ProofStep ';' Proof                       (8)
	Proof -> ProofStep ';'                             (9)
	Proof -> ProofStepBlock Proof                      (10)
	Proof -> ProofStepBlock                            (11)
	Proof ->                                           (12)
	ProofStep -> suppose Name ':' Form                 (13)
	ProofStep -> thus Form OptionalBy                  (14)
	ProofStep -> hence Form OptionalBy                 (15)
	ProofStep -> have Name ':' Form OptionalBy         (16)
	ProofStep -> then Name ':' Form OptionalBy         (17)
	ProofStep -> equivalently Form                     (18)
	OptionalBy -> by Justification                     (19)
	OptionalBy ->                                      (20)
	ProofStepBlock -> claim Name ':' Form proof Proof end   (21)
	Justification -> Name ',' Justification            (22)
	Justification -> Name                              (23)
	OptionalHyp ->                                     (24)
	OptionalHyp -> Name ':'                            (25)
	Name -> id                                         (26)
	Name -> name                                       (27)
	Form -> id TermArgs                                (28)
	Form -> Form and Form                              (29)
	Form -> Form or Form                               (30)
	Form -> Form imp Form                              (31)
	Form -> not Form                                   (32)
	Form -> exists var dot Form                        (33)
	Form -> forall var dot Form                        (34)
	Form -> true                                       (35)
	Form -> false                                      (36)
	Form -> '(' Form ')'                               (37)
	Term -> var                                        (38)
	Term -> id TermArgs                                (39)
	TermArgs ->                                        (40)
	TermArgs -> '(' Terms ')'                          (41)
	Terms -> Term                                      (42)
	Terms -> Term ',' Terms                            (43)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { Token _ TokenParenOpen }
	')'            { Token _ TokenParenClose }
	and            { Token _ TokenAnd }
	or             { Token _ TokenOr }
	imp            { Token _ TokenImp }
	not            { Token _ TokenNot }
	true           { Token _ TokenTrue }
	false          { Token _ TokenFalse }
	forall         { Token _ TokenForall }
	exists         { Token _ TokenExists }
	dot            { Token _ TokenDot }
	id             { Token _ (TokenId $$) }
	var            { Token _ (TokenVar $$) }
	';'            { Token _ TokenSemicolon }
	':'            { Token _ TokenDoubleColon }
	','            { Token _ TokenComma }
	axiom          { Token _ TokenAxiom }
	theorem        { Token _ TokenTheorem }
	proof          { Token _ TokenProof }
	end            { Token _ TokenEnd }
	name           { Token _ (TokenQuotedName $$) }
	suppose        { Token _ TokenSuppose }
	thus           { Token _ TokenThus }
	then           { Token _ TokenThen }
	hence          { Token _ TokenHence }
	have           { Token _ TokenHave }
	by             { Token _ TokenBy }
	equivalently   { Token _ TokenEquivalently }
	claim          { Token _ TokenClaim }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prog            rule  1
	Declarations    rules 2, 3
	Declaration     rules 4, 5
	Axiom           rule  6
	Theorem         rule  7
	Proof           rules 8, 9, 10, 11, 12
	ProofStep       rules 13, 14, 15, 16, 17, 18
	OptionalBy      rules 19, 20
	ProofStepBlock  rule  21
	Justification   rules 22, 23
	OptionalHyp     rules 24, 25
	Name            rules 26, 27
	Form            rules 28, 29, 30, 31, 32, 33, 34, 35, 36, 37
	Term            rules 38, 39
	TermArgs        rules 40, 41
	Terms           rules 42, 43

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parse -> . Prog                              (rule 0)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7

	Prog           goto state 8
	Declarations   goto state 2
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 1

	Prog -> . Declarations                              (rule 1)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7

	Declarations   goto state 2
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 2

	Prog -> Declarations .                              (rule 1)

	%eof           reduce using rule 1


State 3

	Declarations -> Declaration . Declarations          (rule 2)
	Declarations -> Declaration .                       (rule 3)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7
	%eof           reduce using rule 3

	Declarations   goto state 13
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 4

	Declaration -> Axiom .                              (rule 4)

	axiom          reduce using rule 4
	theorem        reduce using rule 4
	%eof           reduce using rule 4


State 5

	Declaration -> Theorem .                            (rule 5)

	axiom          reduce using rule 5
	theorem        reduce using rule 5
	%eof           reduce using rule 5


State 6

	Axiom -> axiom . Name ':' Form                      (rule 6)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 12

State 7

	Theorem -> theorem . Name ':' Form proof Proof end    (rule 7)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 9

State 8

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 9

	Theorem -> theorem Name . ':' Form proof Proof end    (rule 7)

	':'            shift, and enter state 15


State 10

	Name -> id .                                        (rule 26)

	';'            reduce using rule 26
	':'            reduce using rule 26
	','            reduce using rule 26


State 11

	Name -> name .                                      (rule 27)

	';'            reduce using rule 27
	':'            reduce using rule 27
	','            reduce using rule 27


State 12

	Axiom -> axiom Name . ':' Form                      (rule 6)

	':'            shift, and enter state 14


State 13

	Declarations -> Declaration Declarations .          (rule 2)

	%eof           reduce using rule 2


State 14

	Axiom -> axiom Name ':' . Form                      (rule 6)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 24

State 15

	Theorem -> theorem Name ':' . Form proof Proof end    (rule 7)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 16

State 16

	Theorem -> theorem Name ':' Form . proof Proof end    (rule 7)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	proof          shift, and enter state 34


State 17

	Form -> '(' . Form ')'                              (rule 37)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 33

State 18

	Form -> not . Form                                  (rule 32)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 32

State 19

	Form -> true .                                      (rule 35)

	')'            reduce using rule 35
	and            reduce using rule 35
	or             reduce using rule 35
	imp            reduce using rule 35
	';'            reduce using rule 35
	axiom          reduce using rule 35
	theorem        reduce using rule 35
	proof          reduce using rule 35
	by             reduce using rule 35
	%eof           reduce using rule 35


State 20

	Form -> false .                                     (rule 36)

	')'            reduce using rule 36
	and            reduce using rule 36
	or             reduce using rule 36
	imp            reduce using rule 36
	';'            reduce using rule 36
	axiom          reduce using rule 36
	theorem        reduce using rule 36
	proof          reduce using rule 36
	by             reduce using rule 36
	%eof           reduce using rule 36


State 21

	Form -> forall . var dot Form                       (rule 34)

	var            shift, and enter state 31


State 22

	Form -> exists . var dot Form                       (rule 33)

	var            shift, and enter state 30


State 23

	Form -> id . TermArgs                               (rule 28)

	'('            shift, and enter state 29
	')'            reduce using rule 40
	and            reduce using rule 40
	or             reduce using rule 40
	imp            reduce using rule 40
	';'            reduce using rule 40
	axiom          reduce using rule 40
	theorem        reduce using rule 40
	proof          reduce using rule 40
	by             reduce using rule 40
	%eof           reduce using rule 40

	TermArgs       goto state 28

State 24

	Axiom -> axiom Name ':' Form .                      (rule 6)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	axiom          reduce using rule 6
	theorem        reduce using rule 6
	%eof           reduce using rule 6


State 25

	Form -> Form and . Form                             (rule 29)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 54

State 26

	Form -> Form or . Form                              (rule 30)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 53

State 27

	Form -> Form imp . Form                             (rule 31)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 52

State 28

	Form -> id TermArgs .                               (rule 28)

	')'            reduce using rule 28
	and            reduce using rule 28
	or             reduce using rule 28
	imp            reduce using rule 28
	';'            reduce using rule 28
	axiom          reduce using rule 28
	theorem        reduce using rule 28
	proof          reduce using rule 28
	by             reduce using rule 28
	%eof           reduce using rule 28


State 29

	TermArgs -> '(' . Terms ')'                         (rule 41)

	id             shift, and enter state 50
	var            shift, and enter state 51

	Term           goto state 48
	Terms          goto state 49

State 30

	Form -> exists var . dot Form                       (rule 33)

	dot            shift, and enter state 47


State 31

	Form -> forall var . dot Form                       (rule 34)

	dot            shift, and enter state 46


State 32

	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)
	Form -> not Form .                                  (rule 32)

	')'            reduce using rule 32
	and            reduce using rule 32
	or             reduce using rule 32
	imp            reduce using rule 32
	';'            reduce using rule 32
	axiom          reduce using rule 32
	theorem        reduce using rule 32
	proof          reduce using rule 32
	by             reduce using rule 32
	%eof           reduce using rule 32


State 33

	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)
	Form -> '(' Form . ')'                              (rule 37)

	')'            shift, and enter state 45
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27


State 34

	Theorem -> theorem Name ':' Form proof . Proof end    (rule 7)

	end            reduce using rule 12
	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44

	Proof          goto state 35
	ProofStep      goto state 36
	ProofStepBlock goto state 37

State 35

	Theorem -> theorem Name ':' Form proof Proof . end    (rule 7)

	end            shift, and enter state 69


State 36

	Proof -> ProofStep . ';' Proof                      (rule 8)
	Proof -> ProofStep . ';'                            (rule 9)

	';'            shift, and enter state 68


State 37

	Proof -> ProofStepBlock . Proof                     (rule 10)
	Proof -> ProofStepBlock .                           (rule 11)

	end            reduce using rule 12
			(reduce using rule 11)

	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44

	Proof          goto state 67
	ProofStep      goto state 36
	ProofStepBlock goto state 37

State 38

	ProofStep -> suppose . Name ':' Form                (rule 13)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 66

State 39

	ProofStep -> thus . Form OptionalBy                 (rule 14)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 65

State 40

	ProofStep -> then . Name ':' Form OptionalBy        (rule 17)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 64

State 41

	ProofStep -> hence . Form OptionalBy                (rule 15)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 63

State 42

	ProofStep -> have . Name ':' Form OptionalBy        (rule 16)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 62

State 43

	ProofStep -> equivalently . Form                    (rule 18)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 61

State 44

	ProofStepBlock -> claim . Name ':' Form proof Proof end    (rule 21)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Name           goto state 60

State 45

	Form -> '(' Form ')' .                              (rule 37)

	')'            reduce using rule 37
	and            reduce using rule 37
	or             reduce using rule 37
	imp            reduce using rule 37
	';'            reduce using rule 37
	axiom          reduce using rule 37
	theorem        reduce using rule 37
	proof          reduce using rule 37
	by             reduce using rule 37
	%eof           reduce using rule 37


State 46

	Form -> forall var dot . Form                       (rule 34)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 59

State 47

	Form -> exists var dot . Form                       (rule 33)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 58

State 48

	Terms -> Term .                                     (rule 42)
	Terms -> Term . ',' Terms                           (rule 43)

	')'            reduce using rule 42
	','            shift, and enter state 57


State 49

	TermArgs -> '(' Terms . ')'                         (rule 41)

	')'            shift, and enter state 56


State 50

	Term -> id . TermArgs                               (rule 39)

	'('            shift, and enter state 29
	')'            reduce using rule 40
	','            reduce using rule 40

	TermArgs       goto state 55

State 51

	Term -> var .                                       (rule 38)

	')'            reduce using rule 38
	','            reduce using rule 38


State 52

	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)
	Form -> Form imp Form .                             (rule 31)

	')'            reduce using rule 31
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 31
	axiom          reduce using rule 31
	theorem        reduce using rule 31
	proof          reduce using rule 31
	by             reduce using rule 31
	%eof           reduce using rule 31


State 53

	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form or Form .                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	')'            reduce using rule 30
	and            reduce using rule 30
	or             reduce using rule 30
	imp            reduce using rule 30
	';'            reduce using rule 30
	axiom          reduce using rule 30
	theorem        reduce using rule 30
	proof          reduce using rule 30
	by             reduce using rule 30
	%eof           reduce using rule 30


State 54

	Form -> Form . and Form                             (rule 29)
	Form -> Form and Form .                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	')'            reduce using rule 29
	and            reduce using rule 29
	or             reduce using rule 29
	imp            reduce using rule 29
	';'            reduce using rule 29
	axiom          reduce using rule 29
	theorem        reduce using rule 29
	proof          reduce using rule 29
	by             reduce using rule 29
	%eof           reduce using rule 29


State 55

	Term -> id TermArgs .                               (rule 39)

	')'            reduce using rule 39
	','            reduce using rule 39


State 56

	TermArgs -> '(' Terms ')' .                         (rule 41)

	')'            reduce using rule 41
	and            reduce using rule 41
	or             reduce using rule 41
	imp            reduce using rule 41
	';'            reduce using rule 41
	','            reduce using rule 41
	axiom          reduce using rule 41
	theorem        reduce using rule 41
	proof          reduce using rule 41
	by             reduce using rule 41
	%eof           reduce using rule 41


State 57

	Terms -> Term ',' . Terms                           (rule 43)

	id             shift, and enter state 50
	var            shift, and enter state 51

	Term           goto state 48
	Terms          goto state 78

State 58

	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)
	Form -> exists var dot Form .                       (rule 33)

	')'            reduce using rule 33
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 33
	axiom          reduce using rule 33
	theorem        reduce using rule 33
	proof          reduce using rule 33
	by             reduce using rule 33
	%eof           reduce using rule 33


State 59

	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)
	Form -> forall var dot Form .                       (rule 34)

	')'            reduce using rule 34
	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 34
	axiom          reduce using rule 34
	theorem        reduce using rule 34
	proof          reduce using rule 34
	by             reduce using rule 34
	%eof           reduce using rule 34


State 60

	ProofStepBlock -> claim Name . ':' Form proof Proof end    (rule 21)

	':'            shift, and enter state 77


State 61

	ProofStep -> equivalently Form .                    (rule 18)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 18


State 62

	ProofStep -> have Name . ':' Form OptionalBy        (rule 16)

	':'            shift, and enter state 76


State 63

	ProofStep -> hence Form . OptionalBy                (rule 15)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 20
	by             shift, and enter state 73

	OptionalBy     goto state 75

State 64

	ProofStep -> then Name . ':' Form OptionalBy        (rule 17)

	':'            shift, and enter state 74


State 65

	ProofStep -> thus Form . OptionalBy                 (rule 14)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 20
	by             shift, and enter state 73

	OptionalBy     goto state 72

State 66

	ProofStep -> suppose Name . ':' Form                (rule 13)

	':'            shift, and enter state 71


State 67

	Proof -> ProofStepBlock Proof .                     (rule 10)

	end            reduce using rule 10


State 68

	Proof -> ProofStep ';' . Proof                      (rule 8)
	Proof -> ProofStep ';' .                            (rule 9)

	end            reduce using rule 12
			(reduce using rule 9)

	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44

	Proof          goto state 70
	ProofStep      goto state 36
	ProofStepBlock goto state 37

State 69

	Theorem -> theorem Name ':' Form proof Proof end .    (rule 7)

	axiom          reduce using rule 7
	theorem        reduce using rule 7
	%eof           reduce using rule 7


State 70

	Proof -> ProofStep ';' Proof .                      (rule 8)

	end            reduce using rule 8


State 71

	ProofStep -> suppose Name ':' . Form                (rule 13)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 84

State 72

	ProofStep -> thus Form OptionalBy .                 (rule 14)

	';'            reduce using rule 14


State 73

	OptionalBy -> by . Justification                    (rule 19)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Justification  goto state 82
	Name           goto state 83

State 74

	ProofStep -> then Name ':' . Form OptionalBy        (rule 17)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 81

State 75

	ProofStep -> hence Form OptionalBy .                (rule 15)

	';'            reduce using rule 15


State 76

	ProofStep -> have Name ':' . Form OptionalBy        (rule 16)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 80

State 77

	ProofStepBlock -> claim Name ':' . Form proof Proof end    (rule 21)

	'('            shift, and enter state 17
	not            shift, and enter state 18
	true           shift, and enter state 19
	false          shift, and enter state 20
	forall         shift, and enter state 21
	exists         shift, and enter state 22
	id             shift, and enter state 23

	Form           goto state 79

State 78

	Terms -> Term ',' Terms .                           (rule 43)

	')'            reduce using rule 43


State 79

	ProofStepBlock -> claim Name ':' Form . proof Proof end    (rule 21)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	proof          shift, and enter state 88


State 80

	ProofStep -> have Name ':' Form . OptionalBy        (rule 16)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 20
	by             shift, and enter state 73

	OptionalBy     goto state 87

State 81

	ProofStep -> then Name ':' Form . OptionalBy        (rule 17)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 20
	by             shift, and enter state 73

	OptionalBy     goto state 86

State 82

	OptionalBy -> by Justification .                    (rule 19)

	';'            reduce using rule 19


State 83

	Justification -> Name . ',' Justification           (rule 22)
	Justification -> Name .                             (rule 23)

	';'            reduce using rule 23
	','            shift, and enter state 85


State 84

	ProofStep -> suppose Name ':' Form .                (rule 13)
	Form -> Form . and Form                             (rule 29)
	Form -> Form . or Form                              (rule 30)
	Form -> Form . imp Form                             (rule 31)

	and            shift, and enter state 25
	or             shift, and enter state 26
	imp            shift, and enter state 27
	';'            reduce using rule 13


State 85

	Justification -> Name ',' . Justification           (rule 22)

	id             shift, and enter state 10
	name           shift, and enter state 11

	Justification  goto state 90
	Name           goto state 83

State 86

	ProofStep -> then Name ':' Form OptionalBy .        (rule 17)

	';'            reduce using rule 17


State 87

	ProofStep -> have Name ':' Form OptionalBy .        (rule 16)

	';'            reduce using rule 16


State 88

	ProofStepBlock -> claim Name ':' Form proof . Proof end    (rule 21)

	end            reduce using rule 12
	suppose        shift, and enter state 38
	thus           shift, and enter state 39
	then           shift, and enter state 40
	hence          shift, and enter state 41
	have           shift, and enter state 42
	equivalently   shift, and enter state 43
	claim          shift, and enter state 44

	Proof          goto state 89
	ProofStep      goto state 36
	ProofStepBlock goto state 37

State 89

	ProofStepBlock -> claim Name ':' Form proof Proof . end    (rule 21)

	end            shift, and enter state 91


State 90

	Justification -> Name ',' Justification .           (rule 22)

	';'            reduce using rule 22


State 91

	ProofStepBlock -> claim Name ':' Form proof Proof end .    (rule 21)

	end            reduce using rule 21
	suppose        reduce using rule 21
	thus           reduce using rule 21
	then           reduce using rule 21
	hence          reduce using rule 21
	have           reduce using rule 21
	equivalently   reduce using rule 21
	claim          reduce using rule 21


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 44
Number of terminals: 29
Number of non-terminals: 17
Number of states: 92
