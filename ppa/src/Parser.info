-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from src/Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parseExp -> Prog                            (0)
	Prog -> Declarations                               (1)
	Declarations -> Declaration Declarations           (2)
	Declarations -> Declaration                        (3)
	Declaration -> Axiom                               (4)
	Declaration -> Theorem                             (5)
	Axiom -> axiom name ':' Form                       (6)
	Theorem -> theorem name ':' Form proof Proof qed   (7)
	Proof -> ProofStep ';' Proof                       (8)
	Proof -> ProofStep ';'                             (9)
	ProofStep -> assume name ':' Form                  (10)
	ProofStep -> thus Form by Justification            (11)
	Justification -> name Justification                (12)
	Justification -> name                              (13)
	Form -> id TermArgs                                (14)
	Form -> Form and Form                              (15)
	Form -> Form or Form                               (16)
	Form -> Form imp Form                              (17)
	Form -> not Form                                   (18)
	Form -> exists var dot Form                        (19)
	Form -> forall var dot Form                        (20)
	Form -> true                                       (21)
	Form -> false                                      (22)
	Form -> '(' Form ')'                               (23)
	Term -> var                                        (24)
	Term -> id TermArgs                                (25)
	TermArgs ->                                        (26)
	TermArgs -> '(' Terms ')'                          (27)
	Terms -> Term                                      (28)
	Terms -> Term comma Terms                          (29)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	'('            { TokenParenOpen }
	')'            { TokenParenClose }
	and            { TokenAnd }
	or             { TokenOr }
	imp            { TokenImp }
	not            { TokenNot }
	true           { TokenTrue }
	false          { TokenFalse }
	forall         { TokenForall }
	exists         { TokenExists }
	dot            { TokenDot }
	comma          { TokenComma }
	id             { TokenId $$ }
	var            { TokenVar $$ }
	';'            { TokenSemicolon }
	':'            { TokenDoubleColon }
	axiom          { TokenAxiom }
	theorem        { TokenTheorem }
	proof          { TokenProof }
	qed            { TokenQED }
	name           { TokenQuotedName $$ }
	assume         { TokenAssume }
	thus           { TokenThus }
	by             { TokenBy }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parseExp rule  0
	Prog            rule  1
	Declarations    rules 2, 3
	Declaration     rules 4, 5
	Axiom           rule  6
	Theorem         rule  7
	Proof           rules 8, 9
	ProofStep       rules 10, 11
	Justification   rules 12, 13
	Form            rules 14, 15, 16, 17, 18, 19, 20, 21, 22, 23
	Term            rules 24, 25
	TermArgs        rules 26, 27
	Terms           rules 28, 29

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_parseExp -> . Prog                           (rule 0)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7

	Prog           goto state 8
	Declarations   goto state 2
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 1

	Prog -> . Declarations                              (rule 1)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7

	Declarations   goto state 2
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 2

	Prog -> Declarations .                              (rule 1)

	%eof           reduce using rule 1


State 3

	Declarations -> Declaration . Declarations          (rule 2)
	Declarations -> Declaration .                       (rule 3)

	axiom          shift, and enter state 6
	theorem        shift, and enter state 7
	%eof           reduce using rule 3

	Declarations   goto state 11
	Declaration    goto state 3
	Axiom          goto state 4
	Theorem        goto state 5

State 4

	Declaration -> Axiom .                              (rule 4)

	axiom          reduce using rule 4
	theorem        reduce using rule 4
	%eof           reduce using rule 4


State 5

	Declaration -> Theorem .                            (rule 5)

	axiom          reduce using rule 5
	theorem        reduce using rule 5
	%eof           reduce using rule 5


State 6

	Axiom -> axiom . name ':' Form                      (rule 6)

	name           shift, and enter state 10


State 7

	Theorem -> theorem . name ':' Form proof Proof qed    (rule 7)

	name           shift, and enter state 9


State 8

	%start_parseExp -> Prog .                           (rule 0)

	%eof           accept


State 9

	Theorem -> theorem name . ':' Form proof Proof qed    (rule 7)

	':'            shift, and enter state 13


State 10

	Axiom -> axiom name . ':' Form                      (rule 6)

	':'            shift, and enter state 12


State 11

	Declarations -> Declaration Declarations .          (rule 2)

	%eof           reduce using rule 2


State 12

	Axiom -> axiom name ':' . Form                      (rule 6)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 22

State 13

	Theorem -> theorem name ':' . Form proof Proof qed    (rule 7)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 14

State 14

	Theorem -> theorem name ':' Form . proof Proof qed    (rule 7)
	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)

	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	proof          shift, and enter state 32


State 15

	Form -> '(' . Form ')'                              (rule 23)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 31

State 16

	Form -> not . Form                                  (rule 18)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 30

State 17

	Form -> true .                                      (rule 21)

	')'            reduce using rule 21
	and            reduce using rule 21
	or             reduce using rule 21
	imp            reduce using rule 21
	';'            reduce using rule 21
	axiom          reduce using rule 21
	theorem        reduce using rule 21
	proof          reduce using rule 21
	by             reduce using rule 21
	%eof           reduce using rule 21


State 18

	Form -> false .                                     (rule 22)

	')'            reduce using rule 22
	and            reduce using rule 22
	or             reduce using rule 22
	imp            reduce using rule 22
	';'            reduce using rule 22
	axiom          reduce using rule 22
	theorem        reduce using rule 22
	proof          reduce using rule 22
	by             reduce using rule 22
	%eof           reduce using rule 22


State 19

	Form -> forall . var dot Form                       (rule 20)

	var            shift, and enter state 29


State 20

	Form -> exists . var dot Form                       (rule 19)

	var            shift, and enter state 28


State 21

	Form -> id . TermArgs                               (rule 14)

	'('            shift, and enter state 27
	')'            reduce using rule 26
	and            reduce using rule 26
	or             reduce using rule 26
	imp            reduce using rule 26
	';'            reduce using rule 26
	axiom          reduce using rule 26
	theorem        reduce using rule 26
	proof          reduce using rule 26
	by             reduce using rule 26
	%eof           reduce using rule 26

	TermArgs       goto state 26

State 22

	Axiom -> axiom name ':' Form .                      (rule 6)
	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)

	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	axiom          reduce using rule 6
	theorem        reduce using rule 6
	%eof           reduce using rule 6


State 23

	Form -> Form and . Form                             (rule 15)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 46

State 24

	Form -> Form or . Form                              (rule 16)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 45

State 25

	Form -> Form imp . Form                             (rule 17)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 44

State 26

	Form -> id TermArgs .                               (rule 14)

	')'            reduce using rule 14
	and            reduce using rule 14
	or             reduce using rule 14
	imp            reduce using rule 14
	';'            reduce using rule 14
	axiom          reduce using rule 14
	theorem        reduce using rule 14
	proof          reduce using rule 14
	by             reduce using rule 14
	%eof           reduce using rule 14


State 27

	TermArgs -> '(' . Terms ')'                         (rule 27)

	id             shift, and enter state 42
	var            shift, and enter state 43

	Term           goto state 40
	Terms          goto state 41

State 28

	Form -> exists var . dot Form                       (rule 19)

	dot            shift, and enter state 39


State 29

	Form -> forall var . dot Form                       (rule 20)

	dot            shift, and enter state 38


State 30

	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)
	Form -> not Form .                                  (rule 18)

	')'            reduce using rule 18
	and            reduce using rule 18
	or             reduce using rule 18
	imp            reduce using rule 18
	';'            reduce using rule 18
	axiom          reduce using rule 18
	theorem        reduce using rule 18
	proof          reduce using rule 18
	by             reduce using rule 18
	%eof           reduce using rule 18


State 31

	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)
	Form -> '(' Form . ')'                              (rule 23)

	')'            shift, and enter state 37
	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25


State 32

	Theorem -> theorem name ':' Form proof . Proof qed    (rule 7)

	assume         shift, and enter state 35
	thus           shift, and enter state 36

	Proof          goto state 33
	ProofStep      goto state 34

State 33

	Theorem -> theorem name ':' Form proof Proof . qed    (rule 7)

	qed            shift, and enter state 55


State 34

	Proof -> ProofStep . ';' Proof                      (rule 8)
	Proof -> ProofStep . ';'                            (rule 9)

	';'            shift, and enter state 54


State 35

	ProofStep -> assume . name ':' Form                 (rule 10)

	name           shift, and enter state 53


State 36

	ProofStep -> thus . Form by Justification           (rule 11)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 52

State 37

	Form -> '(' Form ')' .                              (rule 23)

	')'            reduce using rule 23
	and            reduce using rule 23
	or             reduce using rule 23
	imp            reduce using rule 23
	';'            reduce using rule 23
	axiom          reduce using rule 23
	theorem        reduce using rule 23
	proof          reduce using rule 23
	by             reduce using rule 23
	%eof           reduce using rule 23


State 38

	Form -> forall var dot . Form                       (rule 20)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 51

State 39

	Form -> exists var dot . Form                       (rule 19)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 50

State 40

	Terms -> Term .                                     (rule 28)
	Terms -> Term . comma Terms                         (rule 29)

	')'            reduce using rule 28
	comma          shift, and enter state 49


State 41

	TermArgs -> '(' Terms . ')'                         (rule 27)

	')'            shift, and enter state 48


State 42

	Term -> id . TermArgs                               (rule 25)

	'('            shift, and enter state 27
	')'            reduce using rule 26
	comma          reduce using rule 26

	TermArgs       goto state 47

State 43

	Term -> var .                                       (rule 24)

	')'            reduce using rule 24
	comma          reduce using rule 24


State 44

	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)
	Form -> Form imp Form .                             (rule 17)

	')'            reduce using rule 17
	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	';'            reduce using rule 17
	axiom          reduce using rule 17
	theorem        reduce using rule 17
	proof          reduce using rule 17
	by             reduce using rule 17
	%eof           reduce using rule 17


State 45

	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form or Form .                              (rule 16)
	Form -> Form . imp Form                             (rule 17)

	')'            reduce using rule 16
	and            reduce using rule 16
	or             reduce using rule 16
	imp            reduce using rule 16
	';'            reduce using rule 16
	axiom          reduce using rule 16
	theorem        reduce using rule 16
	proof          reduce using rule 16
	by             reduce using rule 16
	%eof           reduce using rule 16


State 46

	Form -> Form . and Form                             (rule 15)
	Form -> Form and Form .                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)

	')'            reduce using rule 15
	and            reduce using rule 15
	or             reduce using rule 15
	imp            reduce using rule 15
	';'            reduce using rule 15
	axiom          reduce using rule 15
	theorem        reduce using rule 15
	proof          reduce using rule 15
	by             reduce using rule 15
	%eof           reduce using rule 15


State 47

	Term -> id TermArgs .                               (rule 25)

	')'            reduce using rule 25
	comma          reduce using rule 25


State 48

	TermArgs -> '(' Terms ')' .                         (rule 27)

	')'            reduce using rule 27
	and            reduce using rule 27
	or             reduce using rule 27
	imp            reduce using rule 27
	comma          reduce using rule 27
	';'            reduce using rule 27
	axiom          reduce using rule 27
	theorem        reduce using rule 27
	proof          reduce using rule 27
	by             reduce using rule 27
	%eof           reduce using rule 27


State 49

	Terms -> Term comma . Terms                         (rule 29)

	id             shift, and enter state 42
	var            shift, and enter state 43

	Term           goto state 40
	Terms          goto state 59

State 50

	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)
	Form -> exists var dot Form .                       (rule 19)

	')'            reduce using rule 19
	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	';'            reduce using rule 19
	axiom          reduce using rule 19
	theorem        reduce using rule 19
	proof          reduce using rule 19
	by             reduce using rule 19
	%eof           reduce using rule 19


State 51

	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)
	Form -> forall var dot Form .                       (rule 20)

	')'            reduce using rule 20
	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	';'            reduce using rule 20
	axiom          reduce using rule 20
	theorem        reduce using rule 20
	proof          reduce using rule 20
	by             reduce using rule 20
	%eof           reduce using rule 20


State 52

	ProofStep -> thus Form . by Justification           (rule 11)
	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)

	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	by             shift, and enter state 58


State 53

	ProofStep -> assume name . ':' Form                 (rule 10)

	':'            shift, and enter state 57


State 54

	Proof -> ProofStep ';' . Proof                      (rule 8)
	Proof -> ProofStep ';' .                            (rule 9)

	qed            reduce using rule 9
	assume         shift, and enter state 35
	thus           shift, and enter state 36

	Proof          goto state 56
	ProofStep      goto state 34

State 55

	Theorem -> theorem name ':' Form proof Proof qed .    (rule 7)

	axiom          reduce using rule 7
	theorem        reduce using rule 7
	%eof           reduce using rule 7


State 56

	Proof -> ProofStep ';' Proof .                      (rule 8)

	qed            reduce using rule 8


State 57

	ProofStep -> assume name ':' . Form                 (rule 10)

	'('            shift, and enter state 15
	not            shift, and enter state 16
	true           shift, and enter state 17
	false          shift, and enter state 18
	forall         shift, and enter state 19
	exists         shift, and enter state 20
	id             shift, and enter state 21

	Form           goto state 62

State 58

	ProofStep -> thus Form by . Justification           (rule 11)

	name           shift, and enter state 61

	Justification  goto state 60

State 59

	Terms -> Term comma Terms .                         (rule 29)

	')'            reduce using rule 29


State 60

	ProofStep -> thus Form by Justification .           (rule 11)

	';'            reduce using rule 11


State 61

	Justification -> name . Justification               (rule 12)
	Justification -> name .                             (rule 13)

	';'            reduce using rule 13
	name           shift, and enter state 61

	Justification  goto state 63

State 62

	ProofStep -> assume name ':' Form .                 (rule 10)
	Form -> Form . and Form                             (rule 15)
	Form -> Form . or Form                              (rule 16)
	Form -> Form . imp Form                             (rule 17)

	and            shift, and enter state 23
	or             shift, and enter state 24
	imp            shift, and enter state 25
	';'            reduce using rule 10


State 63

	Justification -> name Justification .               (rule 12)

	';'            reduce using rule 12


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 30
Number of terminals: 24
Number of non-terminals: 13
Number of states: 64
