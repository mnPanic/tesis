// Teoría matemática de Grupos //
//
// Referencia: https://en.wikipedia.org/wiki/Group_(mathematics)#Uniqueness_of_identity_element
// Simbolos
// - op/2: El operador * del grupo
// - eq/2: Igualdad
// - id/1: Predicado que indica que un elemento es la identidad

axiom eq_refl: forall X . eq(X, X)
axiom eq_sym: forall X. forall Y. eq(X, Y) -> eq(Y, X)
axiom eq_trans: forall X. forall Y. forall Z.
    eq(X, Y) & eq(Y, Z) -> eq(X, Z)

axiom id_def: forall E. forall X.
    (eq(op(E, X), X) & eq(op(X, E), X) -> id(E)) &
    (id(E) -> eq(op(E, X), X) & eq(op(X, E), X))


axiom op_cong_eq_1: forall X. forall Y. forall Z.
    eq(X, Y) -> eq(op(X, Z), op(Y, Z))

axiom op_cong_eq_2: forall X. forall Y. forall Z.
    eq(Y, Z) -> eq(op(X, Y), op(X, Z))

axiom id_exists: exists E. id(E)

axiom inverse_def: forall E . forall A . forall I .
    id(E) -> (
        (inverse(A, I) -> eq(op(A, I), E) & eq(op(I, A), E)) &
        (eq(op(A, I), E) & eq(op(I, A), E) -> inverse(A, I) )
    )

axiom inverse_exists: forall A . exists I . inverse(A, I)

// (X * Y) * Z = X * (Y * Z)
axiom assoc_def: forall X. forall Y. forall Z.
    eq(
        op(op(X, Y), Z),
        op(X, op(Y, Z))
    )

/* sketch
    Si e1 y e2 son identity elements,

    por e1 usando e2
        (1) e2 * e1 = e1 * e2 = e2
    
    por e2 usando e1
        (2) e1 * e2 = e2 * e1 = e1
    
    luego tengo
        e1 * e2 = e2 y
        e1 * e2 = e1
    
    luego,

        e1 = e1 * e2 (eq_sym)
           = e2
           -> e1 = e2 (eq_trans)
*/
theorem identity_unique_2:
    forall E1. forall E2.
        id(E1) & id(E2) -> eq(E1, E2)
proof
    let E1
    let E2
    suppose e1_e2_are_id: id(E1) & id(E2)

    // qvq eq(E1, E2)
    have "e2 * e1 = e2": eq(op(E2, E1), E2)
        by e1_e2_are_id, id_def

    have "e2 * e1 = e1": eq(op(E2, E1), E1)
        by e1_e2_are_id, id_def

    have "e1 = e2 * e1": eq(E1, op(E2, E1)) by "e2 * e1 = e1", eq_sym

    thus eq(E1, E2) by "e1 = e2 * e1", "e2 * e1 = e2", eq_trans
end


// b = b * e            (e es la identidad)
//   = b * (a * c)      (c es inverso de a)
//   = (b * a) * c      (assoc)
//   = e * c            (b inverso de a)
//   = c                (e es id)
theorem inverse_unique:
    forall A . forall B . forall C .
        inverse(A, B) & inverse(A, C) -> eq(B, C)
proof
    let A
    let B
    let C
    suppose b_c_inverse_of_a: inverse(A, B) & inverse(A, C)

    consider E st id_e:id(E) by id_exists

    have "b*e = b": eq(op(B, E), B) by id_def, id_e

    have "b = b*e": eq(B, op(B, E)) by "b*e = b", eq_sym

    have "a * c = e": eq(op(A, C), E) by inverse_def, b_c_inverse_of_a, id_e
    
    have "e = a*c": eq(E, op(A, C)) by "a * c = e", eq_sym

    have "b * e = b * (a * c)": eq(op(B, E), op(B, op(A, C)))
        by "e = a*c", op_cong_eq_2

    have "(b * a) * c = b * (a * c)": eq(op(op(B, A), C), op(B, op(A, C)))
        by assoc_def
    then "b * (a * c) = (b * a) * c": eq(op(B, op(A, C)), op(op(B, A), C))
        by eq_sym
    
    have "b * a = e": eq(op(B, A), E) by b_c_inverse_of_a, inverse_def, id_e
    have "(b * a) * c = e * c": eq(op(op(B, A), C), op(E, C))
        by "b * a = e", op_cong_eq_1

    have "e * c = c": eq(op(E, C), C) by id_def, id_e

    // pasos de transitividad
    have "b = b * (a * c)": eq(B, op(B, op(A, C)))
        by "b = b*e", "b * e = b * (a * c)", eq_trans
    
    then "b = (b * a) * c": eq(B, op(op(B, A), C))
        by "b * (a * c) = (b * a) * c", eq_trans
    
    then "b = e * c": eq(B, op(E, C))
        by "(b * a) * c = e * c", eq_trans
    
    hence eq(B, C)
        by "e * c = c", eq_trans
end